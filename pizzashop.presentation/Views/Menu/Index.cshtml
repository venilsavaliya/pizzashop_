@* @model IEnumerable<DAL.ViewModels.CategoryNameViewModel> *@
@model DAL.ViewModels.MenuViewModel;
@using DAL.ViewModels

@{
    ViewData["Category"] = Model.SelectedCategory;

   @* var categorymodel = new CategoryListModel
   {
        Catagories = Model.Categories,
        SelectedCategory = Model.SelectedCategory

   }; *@
}

<div class="Menu-container p-3">

    <h3 class="custom-blue">Menu</h3>


    <div class="switching-tabs-section d-flex justify-content-start gap-4 bg-white px-3 nav
                " role="tablist">

        <div class="d-flex justify-content-center gap-2 nav-link active p-3" id="nav-home-tab" data-bs-toggle="tab"
            data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">
            <div><img src="~/images/icons/list-check.svg" alt="" class="small-img"></div>
            <div>Items</div>
        </div>
        <div class="d-flex justify-content-center gap-2 nav-link p-3" id="nav-profile-tab" data-bs-toggle="tab"
            data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
            <div><img src="~/images/sidebar icons/dashboard.png" alt="" class="small-img"></div>
  
            <div class="">Modifiers</div>
        </div>


    </div>
 
    @* category list for samll screen *@

    <div class="CategoryForSmallScreen d-lg-none bg-white mt-2 p-2 ">

       
        <div class="d-flex justify-content-between align-items-center p-1">
            <h5 class="custom-blue">Category</h5>
            <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;" data-bs-toggle="modal"
                data-bs-target="#staticBackdrop">+
            </div>
        </div>
        <div class="d-flex flex-column p-2 gap-4 fw-medium overflow-auto h-100">
             @foreach(var c in Model.Categories){
            <div class="category-option-smallscreen d-flex justify-content-start align-items-center gap-2 ">
                <img src="~/images/icons/grid-3x2-gap-fill.svg" alt="" class="category-option-img">
                <div>@c.Name</div>
            </div>
        }
            
        </div>
    </div>

 
    <div class="tab-content bg-white mt-2 bg-white position-relative " id="nav-tabContent">

        @* ----first tab------- *@

        <div class="tab-pane fade show active w-100" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab"
            tabindex="0">
            <div class="d-flex w-100">
                <div class=" category-menu border-0 pt-3 d-none d-lg-block" id="category-menu">
                    <div class="d-flex justify-content-between align-items-center p-1">
                        <h5 class="custom-blue">Category</h5>
                        <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;"
                            data-bs-toggle="modal" data-bs-target="#staticBackdrop">+
                        </div>
                    </div>
                    <div class="d-flex flex-column p-2 mt-5 gap-4 fw-medium overflow-auto h-75" id="category-list">

                        @* category list  *@

                        @* -------partial view here of category list-------- *@

                    </div>

                </div>
                <div class="d-flex flex-column flex-grow-1 pt-3 px-3 w-100 ">
                    <div class="d-flex justify-content-between">
                        <h5 class="custom-blue">Items</h5>
                    </div>
                    <div
                        class="search-delete-section d-flex justify-content-start justify-content-md-end align-items-center">
                        <div class="search-section d-flex gap-2 ">
                            <div class="position-relative" style="width: 180px;">
                                <input type="text" class="p-2 w-100" placeholder="Search" id="menuitem-search-field">
                                <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                            </div>
                            <div class="d-flex justify-content-center align-items-center w-auto border rounded px-3 " style="cursor: pointer;"  data-bs-toggle="modal" data-bs-target="#deleteitemmodal">
                                <img src="~/images/icons/trash.svg" alt="" srcset="" style="width: 20px;"
                                    class="small-img" >
                            </div>
                            <button type="button" class=" custom-btn-bg text-white p-2 border d-none d-md-block" data-bs-toggle="modal" data-bs-target="#addmenuitem"><span
                                    class="fs-5 fw-semibold" >+</span> New Item</button>
                            <button type="button"
                                class=" custom-btn-bg text-white px-3 border fs-5 fw-bold d-md-none">+</button>
                        </div>
                    </div>
                    <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="menuTableContainer">
                       
                    </div> 
                   
                </div>

            </div>
 
        </div>
        @* -----------second tab------------ *@
            <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0">
                <div class="d-flex w-100">
                <div class=" category-menu border-0 pt-3 d-none d-lg-block">
                    <div class="d-flex justify-content-between align-items-center p-1">
                        <h5 class="custom-blue">Modifier Groups</h5>
                        <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;"
                            data-bs-toggle="modal" data-bs-target="#addmodifiergroupmodal">+
                        </div>
                    </div>
                    <div class="d-flex flex-column p-2 mt-5 gap-4 fw-medium overflow-auto h-75" id="modifier-list">

                        @* partial view of modifier list *@

                    </div>

                </div>
                <div class="d-flex flex-column flex-grow-1 pt-3 px-3 w-100 ">
                    <div class="d-flex justify-content-between">
                        <h5 class="custom-blue">Items</h5>
                    </div>
                    <div
                        class="search-delete-section d-flex justify-content-start justify-content-md-end align-items-center">
                        <div class="search-section d-flex gap-2 ">
                            <div class="position-relative" style="width: 180px;">
                                <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritems-search-field">
                                <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                            </div>
                            <div class="d-flex justify-content-center align-items-center w-auto border rounded px-3 " style="cursor: pointer;"  data-bs-toggle="modal" data-bs-target="#deletemassitemmodal">
                                <img src="~/images/icons/trash.svg" alt="" srcset="" style="width: 20px;"
                                    class="small-img" >
                            </div>
                            <button type="button" class=" custom-btn-bg text-white p-2 border d-none d-md-block" data-bs-toggle="modal" data-bs-target="#addmodifieritemmodal"><span
                                    class="fs-5 fw-semibold" >+</span> New
                                Item</button>
                            <button type="button"
                                class=" custom-btn-bg text-white px-3 border fs-5 fw-bold d-md-none">+</button>
                        </div>
                    </div>
                    <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainer">
                       
                    </div> 
                   
                </div>

            </div>
            </div>
    </div>


    <!-- add category modal -->
    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add Category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="Category" asp-controller="Menu" method="post">
                    <div class="modal-body">
                        <div class="d-flex flex-column">

                            <div class="mb-3">

                                <input type="text" class="form-control p-3" id="exampleFormControlInput1" asp-for="Category.Name"
                                    placeholder="Name">
                                <span class="text-danger" asp-validation-for="Category.Name"></span>
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"
                                    placeholder="Description" asp-for="Category.Description"></textarea>
                                 <span class="text-danger" asp-validation-for="Category.Description"></span>
                            </div>
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                         </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

     <!-- add modifierGroup modal -->
    <div class="modal fade" id="addmodifiergroupmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add ModifierGroup</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="AddModifierGroup" asp-controller="Menu" method="post" id="addModifierGroupForm">
                    <div class="modal-body">
                        <div class="d-flex flex-column"> 

                            <div class="mb-3">
                                <input type="text" class="form-control p-3" asp-for="ModifierGroup.Name"
                                    placeholder="Name">
                                 <span class="text-danger" asp-validation-for="ModifierGroup.Name"></span>
                            </div>
                            <div class="mb-3">
                                <textarea class="form-control" rows="3"
                                    placeholder="Description"asp-for="ModifierGroup.Description"></textarea>
                                <span class="text-danger" asp-validation-for="ModifierGroup.Description"></span>
                            </div>

                            <div class="custom-blue mb-2 fs-sm cursor-pointer" id="addexistingmodifierbtn">
                                Add Existing Modifiers +
                            </div>

                            <div class="d-flex gap-2 flex-wrap" id="selectedModifieritemcontainer">
                            
                            @* ---- selected modifier name here ---- *@
                           
                            </div>
                           
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                         </div>
                    </div>

                    

                </form>
            </div>
        </div>
    </div>
     <!-- Edit modifierGroup modal -->
    <div class="modal fade" id="editmodifiergroupmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Edit ModifierGroup</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="EditModifierGroup" asp-controller="Menu" method="post" id="editmodifierForm">
                    <div class="modal-body">
                        <div class="d-flex flex-column"> 
                                 <input type="text" class="form-control p-3" asp-for="ModifierGroup.ModifierId"
                                    id="editmodifiergroupid" hidden>
                            <div class="mb-3">
                                <input type="text" class="form-control p-3" asp-for="ModifierGroup.Name"
                                    placeholder="Name" id="editmodifiergroupname">
                                <span class="text-danger" asp-validation-for="ModifierGroup.Name"></span>
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" rows="3"
                                    placeholder="Description" asp-for="ModifierGroup.Description" id="editmodifiergroupdescription"></textarea>
                                <span class="text-danger" asp-validation-for="ModifierGroup.Description"></span>
                            </div>

                            <div class="custom-blue mb-2 fs-sm cursor-pointer" id="addexistingmodifierbtnforedit">
                                Add Existing Modifiers +
                            </div>

                            <div class="d-flex gap-2 flex-wrap" id="selectedModifieritemcontainerforedit">
                            
                            @* ---- selected and existing modifier name here ---- *@
                           
                            </div>
                           
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="ClearSection()">Cancel</button>
                         </div>
                    </div>

                    

                </form>
            </div>
        </div>
    </div>

    <!-- show modifieritemslist modal for edit modifier group modal-->
    <div class="modal fade" id="modifieritemslist" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-secondary" id="staticBackdropLabel">Select Existing Modifier</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="position-relative m-2" style="width: 280px;">
                    <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritemsmodal-search-field">
                    <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                </div>
                <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainerofmodal">
                       
                </div> 
                <div class="d-flex justify-content-end gap-2 p-2">
                    <button  class="btn custom-btn-bg text-white fw-medium" onclick="handleAddButtonClick()">Add</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>  
        </div>
    </div>
    <!-- show modifieritemslist modal for add modifier group modal-->
    <div class="modal fade" id="modifieritemslistforaddgroup" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-secondary" id="staticBackdropLabel">Select Existing Modifier</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="position-relative m-2" style="width: 280px;">
                    <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritemsforaddmodal-search-field">
                    <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                </div>
                <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainerofaddmodal">
                       
                </div> 
                <div class="d-flex justify-content-end gap-2 p-2">
                    <button  class="btn custom-btn-bg text-white fw-medium" onclick="handleAddButtonClickForAdd()">Add</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>  
        </div>
    </div>

    <!-- show modifieritemslist modal for add modifier -->
    <div class="modal fade" id="modifieritemslistforadd" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-secondary" id="staticBackdropLabel">Select Existing Modifier</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="position-relative m-2" style="width: 280px;">
                    <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritemsmodal-search-field">
                    <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                </div>
                <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainerofmodal">
                       
                </div> 
                <div class="d-flex justify-content-end gap-2 p-2">
                    <button  class="btn custom-btn-bg text-white fw-medium" onclick="handleAddButtonClickForAdd()">Add</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
                
        </div>
    </div>

      @* ---------------- Delete category modal body------------------- *@

    <div class="modal" tabindex="-1" id="deletecategorymodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">

                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete this Category?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteCategoryBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-3" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

      @* ---------------- Delete Modifier Group modal body------------------- *@

    <div class="modal" tabindex="-1" id="deleteModifierGroupmodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">

                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete this?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteModifierGroupBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-3" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

      @* ---------------- Delete Modifier Item modal body------------------- *@

    <div class="modal" tabindex="-1" id="deleteModifieritemmodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">

                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete this?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteModifierItemBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-3" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    @* -------------------------------------------------------------- *@


    @* edit category modal *@

     <div class="modal fade" id="editcategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">edit Category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="EditCategoryById" asp-controller="Menu" method="post" id="editcategoryform">
                    <div class="modal-body">
                        <div class="d-flex flex-column">
                            <input type="text" id="editcategoryid" asp-for="Category.Id" hidden>

                            <div class="mb-3">

                                <input type="text" class="form-control p-3" id="editcategoryformname" asp-for="Category.Name"
                                    placeholder="Name">
                                    <span class="text-danger" asp-validation-for="Category.Name"></span>
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" id="editcategoryformdescription" rows="3"
                                    placeholder="Description" asp-for="Category.Description"></textarea>
                            </div>
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium">Edit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>
</div>

 @* Add Menu Item modal *@

     <div class="modal fade " id="addmenuitem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add New Menu Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addItemForm" enctype="multipart/form-data" >
                    <div class="modal-body">
                         <div class="add-menu-item row">

                                <div class="col-8">

                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="form-floating col">
                                    <div class="form-floating col">
                                        <select  class="form-select" id="Category" asp-for="Menuitem.CategoryId">
                                            @* <option selected>Select Categories</option> *@
                                            @foreach(var c in Model.Categories){
                                                if(c.Id == Model.SelectedCategory){
                                                    <option value=@c.Id selected>@c.Name</option>
                                                }else{

                                                <option value=@c.Id>@c.Name</option>
                                                }
                                            }
                                        </select>
                                        <label for="floatingSelect">Categories</label>
                                         <span class="text-danger" asp-validation-for="Menuitem.CategoryId"></span>

                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" asp-for="Menuitem.Type">
                                            <option selected value="" >Select a Type</option>
                                            <option value="Veg">Veg</option>
                                            <option value="Non-Veg">Non-Veg</option>
                                        </select>
                                        <label for="floatingSelect">Item Type</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.Type"></span>
                                    </div>
                                </div>

                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" asp-for="Menuitem.Rate">
                                        <label for="floatingInput">Rate</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.Rate"></span>
                                    </div>
                                </div>

                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" asp-for="Menuitem.Isavailable" value="true">
                                        <span class="ms-3">Available</span>
                                        <span class="text-danger" asp-validation-for="Menuitem.Isavailable"></span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" asp-for="Menuitem.DefaultTax" value="true">
                                        <span class="ms-3">Default Tax</span>
                                        <span class="text-danger" asp-validation-for="Menuitem.DefaultTax"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="row position-relative ">
                                <div class="col">
                                    <input class="form-control form-control p-3" type="text" placeholder="Name" asp-for="Menuitem.ItemName" >
                                </div>
                                <span class="text-danger position-absolute" style="bottom: -25px;" asp-validation-for="Menuitem.ItemName"></span>
                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" asp-for="Menuitem.Quantity">
                                        <label for="floatingInput">Quantity</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.Quantity"></span>
                                    </div>
                                </div>
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" asp-for="Menuitem.Unit">
                                            <option selected value="">Select a Unit</option>

                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.Unit"></span>
                                    </div>
                                </div>



                            </div>

                            <div class="row mt-4">
                                <div class="col-6 form-floating">
                                    @* <input class="form-control form-control p-3" id="floatingInput" type="text" placeholder="Tax Percentage" asp-for="Menuitem.TaxPercentage">
                                    <label for="floatingInput">Tax Percentage</label>
                                    <span class="text-danger" asp-validation-for="Menuitem.TaxPercentage"></span> *@
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput" asp-for="Menuitem.TaxPercentage">
                                        <label for="floatingInput">Tax Percentage</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.TaxPercentage"></span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Short Code" asp-for="Menuitem.ShortCode">
                                   
                                    <span class="text-danger" asp-validation-for="Menuitem.ShortCode"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="form-floating">
                             <textarea type="text" class="form-control" style="height: 100px;" id="floatingTextarea" asp-for="Menuitem.Description"></textarea>
                            <label for="floatingTextarea">Description</label>
                            <span class="text-danger" asp-validation-for="Menuitem.Description"></span>
                        </div>
                       
                    </div>

                    <div class="row mt-4">
                        <div >
                            <input type="file" id="" class="bg-primary w-100 file-input position-absolute opacity-0" asp-for="Menuitem.Image">
                            <div class="d-flex flex-column w-100 align-items-center border rounded py-4 gap-2 bg-white">
                                <img src="~/images/icons/cloud-upload.svg" alt="" srcset="" class="">
                                <div>Browse Files</div>
                            </div>
                        </div>
                    </div> 
                                </div>
        
                                 <div class="col-4" style="background-color: #fff5d7;">
                                <div class="form col-12">
                                    <div class="row mt-2">
                                        <div class="form col multiselect">
                                        <select  class="form-select selectBox" id="modifierGroupSelect">
                                                <option selected>Select Modifier Group</option>

                                                @* showing options for all modifiergroup name *@
                                                @foreach(var m in @Model.ModifierGroups)
                                                {
                                                    <option value=@m.ModifiergroupId>@m.Name</option>
                                                }
                                        </select>

                                        <div id="modifieritemspartialview" class="d-flex flex-column rounded d-none p-3 overflow-auto" style="height: 400px;">

                                         </div>
 
                                    </div>
                                    </div> 

                                </div>
                                 </div>
                         </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="editmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>

@* Edit Menu Item Modal *@
       
    <div class="modal fade " id="editmenuitem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Edit Menu Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editItemForm" enctype="multipart/form-data"  method="post" >
                    <div class="modal-body">
                         <div class="add-menu-item row">

                            <input asp-for="Menuitem.Id" id ="itemId"  hidden>

                                <div class="col-8">

                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="form-floating col">
                                    <div class="form-floating col">
                                        <select  class="form-select" id="Category" asp-for="Menuitem.CategoryId">
                                            @* <option selected>Select Categories</option> *@
                                            @foreach(var c in Model.Categories){
                                                if(c.Id == Model.SelectedCategory){
                                                    <option value=@c.Id selected>@c.Name</option>
                                                }else{

                                                <option value=@c.Id>@c.Name</option>
                                                }
                                            }
                                        </select>
                                        <label for="floatingSelect">Categories</label>
                                        <span class="text-danger" asp-validation-for="Menuitem.CategoryId"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="form-floating col-6">
                                    <div class="form-floating col"> 
                                        <select  class="form-select" asp-for="Menuitem.Type" id="type">
                                            <option selected>Select a Type</option>
                                            <option value="Veg">Veg</option>
                                            <option value="Non-Veg">Non-Veg</option>
                                        </select>
                                        <label for="floatingSelect">Item Type</label>
                                         <span class="text-danger" asp-validation-for="Menuitem.Type"></span>
                                    </div>
                                </div>

                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="Rate" value="0" asp-for="Menuitem.Rate">
                                        <label for="floatingInput">Rate</label>
                                         <span class="text-danger" asp-validation-for="Menuitem.Rate"></span>
                                    </div>
                                </div>

                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" asp-for="Menuitem.Isavailable" id="Isavailable" value="true">
                                        <span class="ms-3">Available</span>
                                         <span class="text-danger" asp-validation-for="Menuitem.Isavailable"></span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" asp-for="Menuitem.DefaultTax" id="DefaultTax" value="true">
                                        <span class="ms-3">Default Tax</span>
                                         <span class="text-danger" asp-validation-for="Menuitem.DefaultTax"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="row">
                                <div class="col">
                                    <input class="form-control form-control p-3" type="text" placeholder="Name" asp-for="Menuitem.ItemName" id="itemname">
                                     <span class="text-danger" asp-validation-for="Menuitem.ItemName"></span>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control"  value="0" asp-for="Menuitem.Quantity" id="Quantity">
                                        <label for="floatingInput">Quantity</label>
                                         <span class="text-danger" asp-validation-for="Menuitem.Quantity"></span>
                                    </div>
                                </div>
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" asp-for="Menuitem.Unit" id ="Unit">
                                            <option selected>Select a Unit</option>
                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                         <span class="text-danger" asp-validation-for="Menuitem.Unit"></span>
                                    </div>
                                </div>



                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Tax Percentage" asp-for="Menuitem.TaxPercentage" id="TaxPercentage">
                                     <span class="text-danger" asp-validation-for="Menuitem.TaxPercentage"></span>
                                </div>
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Short Code" asp-for="Menuitem.ShortCode" id="ShortCode">
                                     <span class="text-danger" asp-validation-for="Menuitem.ShortCode"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="form-floating">
                            <textarea class="form-control"  style="height: 100px" asp-for="Menuitem.Description" id="Description"></textarea>
                            <label for="floatingTextarea">Description</label>
                             <span class="text-danger" asp-validation-for="Menuitem.Description"></span>
                          </div>
                    </div>

                    <div class="row mt-4">
                        <div>
                            <input type="file" id="" class="bg-primary w-100 file-input position-absolute opacity-0" asp-for="Menuitem.Image">
                            <div class="d-flex flex-column w-100 align-items-center border rounded py-4 gap-2 bg-white">
                                <img src="~/images/icons/cloud-upload.svg" alt="" srcset="" class="">
                                <div>Browse Files</div>
                            </div>
                        </div>
                    </div> 
                                </div>
        
                                 <div class="col-4" style="background-color: #fff5d7;">
                                <div class="form col-12">
                                    <div class="row mt-2">
                                        <div class="form col multiselect">
                                        <select  class="form-select selectBox" id="modifierGroupSelectforedit">
                                                <option selected>Select Modifier Group</option>

                                                @* showing options for all modifiergroup name *@
                                                @foreach(var m in @Model.ModifierGroups)
                                                {
                                                    <option value=@m.ModifiergroupId>@m.Name</option>
                                                }
                                        </select>
                                        @*  *@
                                        
                                        <div id="modifieritemspartialviewforedit" class="d-flex flex-column rounded d-none p-3 overflow-auto" style="height: 400px;">
                                           
                                         </div>
                                    </div>
                                    </div>

                                </div>
                                 </div>
                         </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="editmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>


      @* ---------------- Delete item modal body------------------- *@

    <div class="modal" tabindex="-1" id="deleteitemmodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">
                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete This Item?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteitemBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
      @* ---------------- Delete item modal body fro mass delete------------------- *@

    <div class="modal" tabindex="-1" id="deletemassitemmodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">
                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete This Item?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deletemassitemBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
    @* -------------------------------------------------------------- *@
</div> 

@* Add Modifier Item Modal *@

<div class="modal fade " id="addmodifieritemmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add New Modifier Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="AddModifierItemForm" enctype="multipart/form-data" asp-action="AddModifierItem" asp-controller="Menu" >
                    <div class="modal-body">
                        
                        <div class="row">
                            <div class="col">
                                 <select  class="form-select selectBox p-3" id="modifierGroupSelect" asp-for="ModifierItem.ModifierGroupid">
                                                <option selected value="">Select Modifier Group</option>

                                                @* showing options for all modifiergroup name *@
                                                @foreach(var m in @Model.ModifierGroups)
                                                {
                                                    <option value=@m.ModifiergroupId>@m.Name</option>
                                                }
                                        </select>
                                        <span class="text-danger" asp-validation-for="ModifierItem.ModifierGroupid"></span>
                            </div>
                            <div class="col">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="floatingInput" asp-for="ModifierItem.ModifierName">
                                    <label for="floatingInput">Name*</label>
                                    <span class="text-danger" asp-validation-for="ModifierItem.ModifierName"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col"> 
                                <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" asp-for="ModifierItem.Rate">
                                        <label for="floatingInput">Rate</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Rate"></span>
                                    </div>
                                </div>
                            <div class="col">
                                <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" asp-for="ModifierItem.Quantity">
                                        <label for="floatingInput">Quantity</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Quantity"></span>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-floating col">
                                        <select  class="form-select" asp-for="ModifierItem.Unit">
                                            <option selected value="">Select a Unit</option>

                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Unit"></span>
                                    </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mt-3">

                                <textarea class="form-control" id="editcategoryformdescription" rows="3"
                                    placeholder="Description" name="Description"></textarea>
                            </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="addmodifieritemmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>
@* Edit Modifier Item Modal *@

<div class="modal fade " id="editmodifieritemmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Edit Modifier Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="EditModifierItemForm" enctype="multipart/form-data" asp-action="EditModifierItem" asp-controller="Menu" >
                    <div class="modal-body">
                        <input type="text" class="form-control" id="ModifierId" asp-for="ModifierItem.ModifierId" hidden>
                        <div class="row">
                            <div class="col">
                                 <select  class="form-select selectBox p-3" asp-for="ModifierItem.ModifierGroupid" id="ModifierGroupid">
                                                <option selected>Select Modifier Group</option>

                                                @* showing options for all modifiergroup name *@
                                                @foreach(var m in @Model.ModifierGroups)
                                                {
                                                    <option value=@m.ModifiergroupId>@m.Name</option>
                                                }
                                        </select>
                                        <span class="text-danger" asp-validation-for="ModifierItem.ModifierGroupid"></span>
                            </div>
                            <div class="col">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="ModifierName" asp-for="ModifierItem.ModifierName">
                                    <label for="ModifierName">Name*</label>
                                    <span class="text-danger" asp-validation-for="ModifierItem.ModifierName"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col"> 
                                <div class="form-floating">
                                        <input type="number" class="form-control" id="Rate"  asp-for="ModifierItem.Rate">
                                        <label for="floatingInput">Rate</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Rate"></span>
                                    </div>
                                </div>
                            <div class="col">
                                <div class="form-floating">
                                        <input type="number" class="form-control" id="Quantity" asp-for="ModifierItem.Quantity">
                                        <label for="floatingInput">Quantity</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Quantity"></span>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-floating col">
                                        <select  class="form-select" asp-for="ModifierItem.Unit" id="Unit">
                                            <option selected value="">Select a Unit</option>

                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                        <span class="text-danger" asp-validation-for="ModifierItem.Unit"></span>
                                    </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mt-3">

                                <textarea class="form-control" id="Description" rows="3"
                                    placeholder="Description" asp-for="ModifierItem.Description"></textarea>
                            </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="addmodifieritemmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
<script>


    function setEditData(element){
    

        var userId = element.getAttribute("data-id");
        var name =  element.getAttribute("data-name")
        var description = element.getAttribute("data-description");
        var editBtn = document.getElementById("editmodalbtn");
        document.getElementById("editid").value=userId;
        document.getElementById("editformname").value=name;
        document.getElementById("editformdescription").value=description;
        @* editBtn.href = '@Url.Action("Menu", "Menu")' + '?id=' + userId; *@
    }

    function setDeleteUserId(element) {
        var Id = element.getAttribute("data-id");
        var deleteBtn = document.getElementById("deleteCategoryBtn");
        deleteBtn.href = '@Url.Action("DeleteCategory", "Menu")' + '?id=' + Id;
    }
    @* ----Load ModifierGroup List------- *@

    function loadmodifiers(ele)
    {
        var id = ele.getAttribute("modifiergroup-id");

        $.ajax({
            type:"GET",
            url:"/Menu/GetModifiers",
            data:{modifiergroup_id : id},
            success:function(data)
            {
                $('#modifier-list').html(data);
            }
        });

        $.ajax({ 
            url: '@Url.Action("GetModifierItemsList", "Menu")',
            type: 'GET',
            data: {modifiergroup_id:id},
            success: function (data) {
                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".modifieritemcheckbox");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#modifieritemstablecontainer').html($partialView);
                
            }
        });
    }
    @* -----Load Category List -----*@
    @* pwd *@
    function loadcategories(ele)
    {
    
    var id = ele.getAttribute("category-id");
    console.log(id)
        $.ajax({
            type:"GET",
            url:"/Menu/GetCategories",
            data:{cat : id},
            success:function(data)
            {
                $('#category-list').html(data);
            }

        });

        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: {cat:id},
            success: function (data) {

                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".inner_checkbox");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#menuTableContainer').html($partialView);
            }
        });
    }

    document.addEventListener("DOMContentLoaded", () => {

    @* let activeTab = localStorage.getItem("activeTab");

    if (activeTab) {
        let tabElement = document.querySelector(`[data-tab="${activeTab}"]`);
        if (tabElement) {
            new bootstrap.Tab(tabElement).show();
        }
    }

    // Listen for tab change and store active tab in localStorage
    document.querySelectorAll("#myTabs .nav-link").forEach(tab => {
        tab.addEventListener("shown.bs.tab", function (event) {
            let selectedTab = event.target.getAttribute("data-tab");
            localStorage.setItem("activeTab", selectedTab);
        });
    }); *@

    var categoryoption = document.querySelectorAll(".category-option");

    categoryoption.forEach(opt => {
        opt.addEventListener("mouseover", function() {
            console.log("mouseleave enter")
            var actionbtn = opt.querySelector("#categoryoption_actionbtn");
            
            actionbtn.classList.remove("d-none");
            actionbtn.classList.add("d-block");
        });
        opt.addEventListener("mouseleave", function() {
            var actionbtn = opt.querySelector("#categoryoption_actionbtn");
            actionbtn.classList.remove("d-block");
            actionbtn.classList.add("d-none");
        });
    });



        const categories = document.querySelectorAll(".category-option");
        const categoriesforsmall = document.querySelectorAll(".category-option-smallscreen");
    

        if (categories.length > 0) {
            // Select the first category by default
            @* categories[0].classList.add("category-active-option");
            categoriesforsmall[0].classList.add("category-active-option"); *@
        }

        categories.forEach(category => {
            category.addEventListener("click", () => {
                // Remove the active class from all categories
                categories.forEach(cat => cat.classList.remove("category-active-option"));

                // Add active class to the clicked category
                category.classList.add("category-active-option");
            });
        });
        categoriesforsmall.forEach(category => {
            category.addEventListener("click", () => {
                // Remove the active class from all categories
                categoriesforsmall.forEach(cat => cat.classList.remove("category-active-option"));

                // Add active class to the clicked category
                category.classList.add("category-active-option");
            });
        });
    });

    let currentPage = 1;

    @* First Time Page Load  *@
    $(document).ready(function () {
        
        currentPage =1;
         

        $.ajax({
            type:"GET",
            url:"/Menu/GetCategories",
            data:{cat : @Model.SelectedCategory},
            success:function(data)
            {
                $('#category-list').html(data);
              


                $.ajax({
                url: '@Url.Action("Menu", "Menu")',
                type: 'GET',
                data: {cat:"@Model.SelectedCategory"},
                success: function (data) {
                        let $partialView = $(data);
    
                        let maincb = $partialView.find("#menu-main-checkbox");
                        let checkboxes = $partialView.find(".inner_checkbox");
                        console.log(maincb)
                         // When main checkbox is clicked
                        maincb.on("change", function () {
                            console.log("Main checkbox changed:", this.checked);
                            checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                        });

                        // If any inner checkbox is unchecked, uncheck the main checkbox
                        checkboxes.on("change", function () {
                            if (!this.checked) {
                                maincb.prop("checked", false);
                            } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                                maincb.prop("checked", true);
                            }
                        });

                        $('#menuTableContainer').html($partialView);
                    
                    }
                });
            }

        });

        

        $.ajax({
            type:"GET",
            url:"/Menu/GetModifiers",
            success:function(data)
            {
                $('#modifier-list').html(data);
               
            }

        });

        $.ajax({
            url: '@Url.Action("GetModifierItemsList", "Menu")',
            type: 'GET',
            data: {modifiergroup_id:@Model.SelectedModifierGroup},
            success: function (data) {
                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".modifieritemcheckbox");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#modifieritemstablecontainer').html($partialView);
                
            }
        });

        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: {cat:@Model.SelectedCategory},
            success: function (data) {
                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".inner_checkbox");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#menuTableContainer').html($partialView);
            }
        });
        
        @* $.ajax({
            url: '@Url.Action("GetAllModifierItemsList", "Menu")',
            type: 'GET',
            success: function (data) {
                $('#modifieritemstablecontainerofmodal').html(data);
            }
        }); *@
         
    });

    @* function loadMenuTable(pageNumber, pageSize,cat) {
        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: { pageNumber: pageNumber, pageSize: pageSize,cat:cat},
            success: function (data) {
                $('#menuTableContainer').html(data);
            }
        });
    } *@

     


    function setDeleteUserId(element) {
        var userId = element.getAttribute("data-id");
        var deleteBtn = document.getElementById("deleteUserBtn");
        deleteBtn.href = '@Url.Action("DeleteUser", "Menu")' + '?id=' + userId;
    }
    @* document.getElementById("search-field").addEventListener("keyup", function (event) {
        search();
    }); *@

    @* for getting modifier group option list *@
    $.ajax({
        type: "GET",
        url: "/GetData/GetModifierGroupList",
        dataType: "json",
        success: function(result) {
            console.log(result);
            for(let i=0;i<result.length;i++)
            {
                @* $("#modifierGroupSelect").append(`<option value="${result[i].ModifiergroupId}">${result[i].name}</option>`); *@
                $("#checkboxes").append(`<div class="form-check">
                <input class="form-check-input" type="checkbox" name="Modifiers" value="${result[i].modifiergroupId}">
                <label class="form-check-label" for="flexCheckDefault">
                    ${result[i].name}
                 </label>
                </div>`);
            }   
         }
    });
    
    var expanded = false;

function showCheckboxes() {
    console.log("click")
  var checkboxes = document.getElementById("checkboxes");
  if (!expanded) {
    checkboxes.classList.remove('d-none');
    checkboxes.classList.add('d-block');
    expanded = true;
  } else {
    checkboxes.classList.remove('d-block');
    checkboxes.classList.add('d-none');
    expanded = false;
  }
}

@* $("#addItemForm").submit(function (e) {
    e.preventDefault();
    $('#addmenuitem').modal('hide'); 
    console.log("inside form")
    let formData = new FormData(this);

    // Get checked modifier values
    let selectedModifiers = [];
    $("input[name='Modifiers']:checked").each(function () {
        selectedModifiers.push($(this).val());
    });

    formData.append("Modifiers", selectedModifiers);
    console.log(selectedModifiers);
    $.ajax({
        type: "POST",
        url: "/Menu/AddNewItem",
        data: formData,
        contentType: false,
        processData: false,
        success:function (response){
           
            if (response.redirectTo) {
            window.location.href = response.redirectTo;  // Manually redirect
        }
             
            
        } 
    });
}); *@




@* ---------- Menu Items Functionality ------------ *@

@* select All inner checkbox based on main checkbox *@
@* pwd *@
document.addEventListener("DOMContentLoaded", function () {
    // Select main checkbox

    document.addEventListener("change",function (){
    @* const mainCheckbox = document.getElementById("menu-main-checkbox");
    const checkboxes = document.querySelectorAll(".inner_checkbox");

    // When main checkbox is clicked
    mainCheckbox.addEventListener("change", function () {
        console.log("main checkbox change")
        checkboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked; // Set inner checkboxes same as main
        });
    });

    // If any inner checkbox is unchecked, uncheck the main checkbox
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            if (!this.checked) {
                mainCheckbox.checked = false;
            }
            // If all checkboxes are checked, also check the main checkbox
            else if (Array.from(checkboxes).every(chk => chk.checked)) {
                mainCheckbox.checked = true;
            }
        });
    }); *@

    
    });
    
});

document.addEventListener("DOMContentLoaded", function () {
    // Function to set up event listeners
    function setupCheckboxListeners() {
        
        const mainCheckbox = document.getElementById("menu-main-checkbox");
        const checkboxes = document.querySelectorAll(".inner_checkbox");

        if (!mainCheckbox || checkboxes.length === 0) {
            console.warn("Main checkbox or inner checkboxes not found. Waiting for partial view to load.");
            return;
        }

        console.log("Checkbox listeners attached successfully.");

        // Main checkbox change event
        mainCheckbox.addEventListener("change", function () {
            console.log("Main checkbox changed:", mainCheckbox.checked);
            checkboxes.forEach(checkbox => {
                checkbox.checked = mainCheckbox.checked;
            });
        });

        // Inner checkboxes change event
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                if (!this.checked) {
                    mainCheckbox.checked = false;
                } else if (Array.from(checkboxes).every(chk => chk.checked)) {
                    mainCheckbox.checked = true;
                }
            });
        });
    }

    // Initial setup when page loads
    setupCheckboxListeners();

    // Reinitialize when the partial view is loaded (if loaded dynamically via AJAX)
    document.addEventListener("DOMNodeInserted", function (event) {
        if (event.target.id === "partialViewContainer") { // Change to the correct container ID
            console.log("Partial view loaded. Re-attaching event listeners.");
            setupCheckboxListeners();
        }
    });
});


@* Mass Delete Of Menu Item *@

  $("#deleteitemBtn").click(function (e) {
    var idlist = [];
    const checkboxes = document.querySelectorAll(".inner_checkbox");

    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            idlist.push(checkbox.value);  // Fix: Use checkbox.value instead of this.value
        }
    });

    console.log(idlist)
    

    $.ajax({
        url: "/Menu/Deleteitems",
        method: "POST",
        data:{ 
            ids: idlist
         },  
        success: function (response) {
            console.log("Items deleted successfully");
            window.location.href='/Menu/Index?cat=@Model.SelectedCategory'; 
        },
        error: function (xhr, status, error) {
            console.error("Error deleting items:", error);
        }
    });
});

@* Delete single Menu item *@

function setDeleteItemId(element) {

    var Id = element.getAttribute("item-id");
    let cat_id= $("#category-list .category-active-option").attr("category-id");
    var deleteBtn = document.getElementById("deleteitemBtn");
    deleteBtn.href = '@Url.Action("DeleteSingleItem", "Menu")' + '?id=' + Id+'&catid='+cat_id;

}


@* showing and hiding modal manually *@

document.getElementById("addexistingmodifierbtn").addEventListener('click',()=>{
    
    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("addmodifiergroupmodal"))
    modifiermodal.hide();
    var itemlistmodal = new bootstrap.Modal(document.getElementById("modifieritemslistforaddgroup"))
    itemlistmodal.show();

});

document.getElementById("addexistingmodifierbtnforedit").addEventListener('click',()=>{
    
    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("editmodifiergroupmodal"))
    modifiermodal.hide();
    ClearSection();
    updateCheckboxStates();
    var itemlistmodal = new bootstrap.Modal(document.getElementById("modifieritemslist"));
    itemlistmodal.show();

});


    

@* showing modifier item partial view when modifier group is selected for add menu item modal*@

$(document).ready(function () {
    let selectedModifierGroups = []; // Store selected values as objects

    // modifierGroupSelect partial view render

    $("#modifierGroupSelect").change(function () {
        let selectedValue = $(this).val(); // Get selected option value
        let selectedText = $("#modifierGroupSelect option:selected").text();

        // Check if "Select Modifier Group" is chosen or if the value already exists
        if (selectedValue === "Select Modifier Group" || selectedModifierGroups.some(obj => obj.modifierGroupId == selectedValue)) {
            return;
        }

        // Create object for the selected modifier group
        let newModifierGroup = {
            modifierGroupId: selectedValue,
            min: '0', // Default min value
            max: '10'
        };

        // Push new object to list
        selectedModifierGroups.push(newModifierGroup);

        // AJAX call to fetch the partial view
        $.ajax({
            url: "/Menu/GetModifierItems", // Replace with actual controller/action
            type: "GET",
            data: { modifierGroupId: selectedValue },
            success: function (response) {
                let $partialView = $(response);

                // Modify select dropdowns to track changes
                $partialView.find("select.min-select").attr("data-group-id", selectedValue);
                $partialView.find("select.max-select").attr("data-group-id", selectedValue);

                // Attach event listeners to dropdowns inside the newly added partial view
                $partialView.find("select.min-select").change(updateMinValue);
                $partialView.find("select.max-select").change(updateMaxValue);

                // Trigger updateMaxValue once after rendering the partial view
                let maxSelect = $partialView.find("select.max-select");
                updateMaxValue.call(maxSelect); 

                // Attach delete event listener for the trash icon
                $partialView.find(".delete-modifier-group").on("click", function () {
                    let groupId = $(this).attr("modifiergroup-id");

                    // Remove the partial view
                    $partialView.remove();

                    // Remove the object from selectedModifierGroups
                    selectedModifierGroups = selectedModifierGroups.filter(obj => obj.modifierGroupId != groupId);

                    console.log("Updated list after deletion:", selectedModifierGroups);
                });

                // Append Partial View and show container
                $("#modifieritemspartialview").append($partialView).removeClass("d-none");
            },
            error: function () {
                alert("Error loading modifier items!");
            }
        });
    });

    
    // Function to update min value in the list
    function updateMinValue() {
        let groupId = $(this).attr("data-group-id");
        let newValue = $(this).val();

        // Find and update the object in the list
        let modifierGroup = selectedModifierGroups.find(obj => obj.modifierGroupId == groupId);
        if (modifierGroup) {
            modifierGroup.min = newValue;
        }

        console.log(selectedModifierGroups)
    }

    // Function to update max value in the list
    function updateMaxValue() {
        let groupId = $(this).attr("data-group-id");
        let newValue = $(this).val();

        // Find and update the object in the list
        let modifierGroup = selectedModifierGroups.find(obj => obj.modifierGroupId == groupId);
        if (modifierGroup) {
            modifierGroup.max = newValue;
        }

        console.log(selectedModifierGroups)
    }
    
    @* submiting add item form *@
    $("#addItemForm").submit(function(e) {
    e.preventDefault();


    var formData = new FormData(this);

    console.log("venil",selectedModifierGroups);

    formData.append("ModifierGroups", JSON.stringify(selectedModifierGroups)); 
 
    $.ajax({
        url: "/Menu/AddNewItem",
        type: "POST",
        processData: false,
        contentType: false,
        data: formData,
        success: function(response) {
            window.location.href = response.redirectTo;
        },
        error: function(err) {
            console.error("Error adding item:", err);
        }
    });
});

});

@* showing modifier item partial view when modifier group is selected for edit menu item modal*@



    let selectedModifierGroupsforedit = []; 
    function setedititemdata(ele) {

    let modifiergroupids = [];
    selectedModifierGroupsforedit=[];
    var c = JSON.parse(ele.getAttribute("item-obj"));
    console.log(c);

    var editmenuitem = document.getElementById("editmenuitem");
    editmenuitem.querySelector("#Rate").value = c.rate;
    editmenuitem.querySelector("#type").value = c.type;
    editmenuitem.querySelector("#Isavailable").checked = c.isavailable ? true : false;
    editmenuitem.querySelector("#itemname").value = c.itemName;
    editmenuitem.querySelector("#Quantity").value = c.quantity;
    editmenuitem.querySelector("#Unit").value = c.unit;
    editmenuitem.querySelector("#TaxPercentage").value = c.taxPercentage;
    editmenuitem.querySelector("#ShortCode").value = c.shortCode;
    editmenuitem.querySelector("#Description").value = c.description;
    editmenuitem.querySelector("#DefaultTax").checked = c.defaultTax ? true : false;
    editmenuitem.querySelector("#itemId").value = c.itemId;

    console.log("id",c.itemId)

    $("#modifieritemspartialviewforedit").html("");

    $.ajax({
        url: "/Menu/GetModifierGroupIdsByItemId",
        type: "GET",
        data: { itemid: c.itemId },
        success: function (response) {

            console.log("edit item modifier groups",response)
            modifiergroupids = response;

            // Move the forEach inside the AJAX success function
            modifiergroupids.forEach(function (groupId) {
                $.ajax({
                    url: "/Menu/GetModifierItemsForEdit",
                    type: "GET",
                    data: { modifierGroupId: groupId ,itemid: c.itemId},
                    success: function (response) {
                        let $partialView = $(response);

                        let minValue = $partialView.find("select.min-select").val() || "0";
                        let maxValue = $partialView.find("select.max-select").val() || "10";

                        // Store modifier group data
                        let newModifierGroup = {
                            modifierGroupId: groupId,
                            min: minValue,
                            max: maxValue
                        };

                        selectedModifierGroupsforedit.push(newModifierGroup);

                        console.log("response",response)

                        // Modify select dropdowns to track changes
                        $partialView.find("select.min-select").attr("data-group-id", groupId);
                        $partialView.find("select.max-select").attr("data-group-id", groupId);

                        // Attach event listeners to dropdowns inside the newly added partial view
                        $partialView.find("select.min-select").change(updateMinValue);
                        $partialView.find("select.max-select").change(updateMaxValue);

                        // Trigger updateMaxValue once after rendering the partial view
                        let maxSelect = $partialView.find("select.max-select");
                        updateMaxValue.call(maxSelect);

                        // Attach delete event listener for the trash icon
                        $partialView.find(".delete-modifier-group").on("click", function () {
                            let groupId = $(this).attr("modifiergroup-id");

                            // Remove the partial view
                            $partialView.remove();

                            // Remove the object from selectedModifierGroupsforedit
                            selectedModifierGroupsforedit = selectedModifierGroupsforedit.filter(obj => obj.modifierGroupId != groupId);

                            console.log("Updated list after deletion:", selectedModifierGroupsforedit);
                        });

                        // Append Partial View and show container
                        $("#modifieritemspartialviewforedit").append($partialView).removeClass("d-none");
                    },
                    error: function () {
                        alert("Error loading modifier items!");
                    }
                });
            });
        }, 
        error: function () {
            alert("Error loading modifier group IDs!");
        }
    });

}

    function updateMinValue() {
        let groupId = $(this).attr("data-group-id");
        let newValue = $(this).val();

        // Find and update the object in the list
        let modifierGroup = selectedModifierGroupsforedit.find(obj => obj.modifierGroupId == groupId);
        if (modifierGroup) {
            modifierGroup.min = newValue;
        }

        console.log(selectedModifierGroupsforedit)
    }

    // Function to update max value in the list
    function updateMaxValue() {
        let groupId = $(this).attr("data-group-id");
        let newValue = $(this).val();

        // Find and update the object in the list
        let modifierGroup = selectedModifierGroupsforedit.find(obj => obj.modifierGroupId == groupId);
        if (modifierGroup) {
            modifierGroup.max = newValue;
        }

        console.log(selectedModifierGroupsforedit)
    }
  

    $("#editItemForm").submit(function(e) {
    e.preventDefault();

    var formData = new FormData(this);

    console.log("venil",selectedModifierGroupsforedit);

    formData.append("ModifierGroups", JSON.stringify(selectedModifierGroupsforedit)); 
    formData.append("CategoryId", @Model.SelectedCategory); 

    $.ajax({
        url: "/Menu/EditItem",
        type: "POST",
        processData: false,
        contentType: false,
        data: formData,
        success: function(response) {
            //window.location.href = response.redirectTo;
            selectedModifierGroupsforedit=[];
            @* $("#editPartialView").html(""); *@
            location.reload();
        },
        error: function(err) {
            console.error("Error adding item:", err);
        }
    });
});


@* render new partial view for edit item modal *@
$("#modifierGroupSelectforedit").change(function () {
    let selectedValue = $(this).val();
    let selectedText = $("#modifierGroupSelect option:selected").text();

    if (selectedValue === "Select Modifier Group" || selectedModifierGroupsforedit.some(obj => obj.modifierGroupId == selectedValue)) {
        return;
    }

    let newModifierGroup = {
        modifierGroupId: selectedValue,
        min: '0',
        max: '10'
    };
    selectedModifierGroupsforedit.push(newModifierGroup);

    $.ajax({
        url: "/Menu/GetModifierItems",
        type: "GET",
        data: { modifierGroupId: selectedValue },
        success: function (response) {
            let $partialView = $(response);

            $partialView.find("select.min-select").attr("data-group-id", selectedValue);
            $partialView.find("select.max-select").attr("data-group-id", selectedValue);

            $partialView.find("select.min-select").change(updateMinValue);
            $partialView.find("select.max-select").change(updateMaxValue);

            let maxSelect = $partialView.find("select.max-select");
            updateMaxValue.call(maxSelect);

            $partialView.find(".delete-modifier-group").on("click", function () {
                let groupId = $(this).attr("modifiergroup-id");
                $partialView.remove();
                selectedModifierGroupsforedit = selectedModifierGroupsforedit.filter(obj => obj.modifierGroupId != groupId);
                console.log("Updated list after deletion:", selectedModifierGroupsforedit);
            });

            $("#modifieritemspartialviewforedit").append($partialView).removeClass("d-none");
        },
        error: function () {
            alert("Error loading modifier items!");
        }
    });
});


   
    


@* -----Pagination For Menu Items List------- *@

function MenuitemsPaginationAjax(pageSize,pageNumber,category_id) {
     // Get the dropdown element

    let cat_id= $("#category-list .category-active-option").attr("category-id");
    @* let pageSizeDropdown = document.getElementById("pageSizeDropdownforMenuitems");
    console.log(pageSizeDropdown.value); *@
    let searchkeyword = $("#menuitem-search-field").val();

    console.log("inside item",searchkeyword) 
    console.log("param id",category_id)
    console.log("get id",cat_id)
       
        $.ajax({
            url: "/Menu/Menu",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword,'cat':cat_id},
            type: "GET",
            dataType: "html",
            success: function (data) {
                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".inner_checkbox_modifieritemmodal");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#menuTableContainer').html($partialView);
                @* onPartialViewLoaded();  *@
            },
            error: function () {
                $("#menuTableContainer").html('An error has occurred');
            }
        });
    }


@* -----Pagination For Modifier Items List Modal------- *@
function PaginationAjax(pageSize,pageNumber) {

     // Get the dropdown element
    let pageSizeDropdown = document.getElementById("pageSizeDropdownformodal");
    let searchkeyword = $("#modifieritemsmodal-search-field").val();
    console.log(searchkeyword)
    
    // Store the currently selected value
    let selectedPageSize = pageSizeDropdown?.value;

    console.log("inside pag ajax",pageSize)
        @* if (pageNumber === 0) {
            pageNumber = @((Model?.Page?.CurrentPage ?? 1));
        } *@
        $.ajax({
            url: "/Menu/GetAllModifierItemsList",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword},
            type: "GET",
            dataType: "html",
            success: function (data) {
                $("#modifieritemstablecontainerofmodal").html(data);
                onPartialViewLoaded(); // Ensure checkboxes update after reloading the partial
            },
            error: function () {
                alert("No Projects Found");
                
                $("#modifieritemstablecontainerofmodal").html('An error has occurred');
            }
        });
    }

@* -----Pagination For Modifier Items List add modifier group Modal------- *@
function ModifieritemListForAddPaginationAjax(pageSize,pageNumber) {

     // Get the dropdown element
    let pageSizeDropdown = document.getElementById("pageSizeDropdownformodal");
    let searchkeyword = $("#modifieritemsforaddmodal-search-field").val();
    console.log(searchkeyword)
    
    // Store the currently selected value
    let selectedPageSize = pageSizeDropdown?.value;

    console.log("inside pag ajax",pageSize)
       
        $.ajax({
            url: "/Menu/GetAllModifierItemsListForAdd",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword},
            type: "GET",
            dataType: "html",
            success: function (data) {
                $("#modifieritemstablecontainerofaddmodal").html(data);
                @* onPartialViewLoaded();  *@
                attachCheckboxListenersforAddModal();
            },
            error: function () {
                alert("No Projects Found");
                
                $("#modifieritemstablecontainerofaddmodal").html('An error has occurred');
            }
        });
    }

@* -----Pagination For Modifier Items List------- *@

function ModifieritemsPaginationAjax(pageSize,pageNumber,modifiergroup_id) {
     // Get the dropdown element
   
    modifiergroup_id = $("#modifier-list .category-active-option").attr("modifiergroup-id");
    let pageSizeDropdown = document.getElementById("pageSizeDropdownformodal");
    let searchkeyword = $("#modifieritems-search-field").val();

    console.log("inside pag ajax",pageSize) 
       
        $.ajax({
            url: "/Menu/GetModifierItemsList",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword,'modifiergroup_id':modifiergroup_id},
            type: "GET",
            dataType: "html",
            success: function (data) {
                let $partialView = $(data);
    
                let maincb = $partialView.find("#menu-main-checkbox");
                let checkboxes = $partialView.find(".modifieritemcheckbox");
                console.log(maincb)
                 // When main checkbox is clicked
                maincb.on("change", function () {
                    console.log("Main checkbox changed:", this.checked);
                    checkboxes.prop("checked", this.checked); // Set all inner checkboxes same as main
                });
                  
                // If any inner checkbox is unchecked, uncheck the main checkbox
                checkboxes.on("change", function () {
                    if (!this.checked) {
                        maincb.prop("checked", false);
                    } else if (checkboxes.length === checkboxes.filter(":checked").length) {
                        maincb.prop("checked", true);
                    }
                });

                $('#modifieritemstablecontainer').html($partialView);
                
            },
            error: function () {
                @* $("#modifieritemstablecontainer").html('An error has occurred'); *@
            }
        });
    }

    @* ---- Category Functionality ---- *@

    @* Edit Category *@

    function setEditCategoryData(ele)
    {
        var c = JSON.parse(ele.getAttribute("item-obj"));

        // Set the values in the modal form
        document.getElementById("editcategoryid").value = c.id;
        document.getElementById("editcategoryformname").value = c.name;
        document.getElementById("editcategoryformdescription").value = c.description;

    }

    @* Delete Category *@

    function setDeleteCategoryId(ele)
    {
        let id = ele.getAttribute('category-id');
        let deleteBtn = document.getElementById("deleteCategoryBtn");
        deleteBtn.href = '@Url.Action("DeleteCategory", "Menu")' + '?id=' + id;
    }

    @* edit category form submit *@

    @* $("#editcategoryform").submit(function (event) {
        event.preventDefault(); // Prevent the default form submission

        let formData = new FormData(this); // Get form data
        console.log("Name:", $("#editformname").val());
        console.log(formData);

        $.ajax({
            url: "/Menu/EditCategory", // Update with your actual controller action URL
            type: "POST",
            data: formData,
            processData: false,  // Don't process the files
            contentType: false,  // Don't set contentType (so multipart/form-data works)
            success: function (response) {
                // Handle success response
                console.log("Category updated successfully", response);

                // Close the modal
                $("#editcategory").modal("hide");

                // Optionally refresh the category list or update UI dynamically
                location.reload(); // Or update the specific section dynamically
            },
            error: function (xhr, status, error) {
                // Handle error
                console.error("Error updating category:", error);
                alert("Failed to update category. Please try again.");
            }
        });
    }); *@


    @* ---------------------------------- *@

    @* ---- Modifier Functionality------ *@

    @* function for setting capsule at end of add or edit modifier group  modal *@

    @* async function setcapsule(arr) {
    let updatedArr = [...arr]; // Clone the array to prevent modification issues

    for (let modifierId of arr) {
        try {
            let response = await $.ajax({
                url: `/Menu/GetModifierItemsNamePVByModifieritemId`,
                type: "GET",
                data: { modifier_id: modifierId },
            });

            let $partialView = $(response);

            $partialView.find(".delete-modifier-item").on("click", function () {
                let itemId = $(this).attr("item-id");
                console.log("Item ID:", itemId);

                $partialView.remove();
                updatedArr = updatedArr.filter(i => i != itemId);
                console.log("Updated list after deletion:", updatedArr);
            });

            $("#selectedModifieritemcontainerforedit").append($partialView);

        } catch (error) {
            console.error(`Error fetching details for Modifier ID ${modifierId}:`, error);
        }
    }

    return updatedArr; // Return updated array after all AJAX calls complete
}
 *@

    @* function for getting modifier item name which is related to perticular modifier group *@
@* pwd *@
     let  selectedModifierIdsforedit = [];
    function GetModifierItemListByGroupid(ele)
    {   $("#selectedModifieritemcontainerforedit").html("");
        let obj = JSON.parse(ele.getAttribute('data-obj'));
        let modifiergroupid = obj.modifiergroupId;
        let name = obj.name;
        let description = obj.description;

        document.getElementById("editmodifiergroupid").value = modifiergroupid;
        document.getElementById("editmodifiergroupname").value = name;
        document.getElementById("editmodifiergroupdescription").value = description;

        $.ajax({
        url: `/Menu/GetModifierItemsidByModifierGroupid`,
        type: "GET",
        data: { modifiergroup_id: modifiergroupid },
        success: function (data) {
            console.log("Modifier Items:", data);
            selectedModifierIdsforedit= data;
            console.log("f",selectedModifierIdsforedit);

            selectedModifierIdsforedit.forEach(function (modifierId) {
            $.ajax({
                url: `/Menu/GetModifierItemsNamePVByModifieritemId`, // Update with your actual endpoint
                type: "GET",
                data: { modifier_id: modifierId },
                success: function (modifierData) {
                    let $partialView = $(modifierData);

                    $partialView.find(".delete-modifier-item").on("click", function () {
                    let itemId = $(this).attr("item-id");
                    console.log("itemid",itemId);
                    $partialView.remove();
                    selectedModifierIdsforedit = selectedModifierIdsforedit.filter(i => i != itemId);
                    console.log("Updated list after deletion:", selectedModifierIdsforedit);
                    });
                     $("#selectedModifieritemcontainerforedit").append($partialView);
                },
                error: function (error) {
                    console.error(`Error fetching details for Modifier ID ${modifierId}:`, error);
                }
            });
        });
            
        },
        error: function (error) {
            console.error("Error fetching modifiers:", error);
        }
        });
       
    };

    @* clear the existing modifier section when closing modal *@

    function ClearSection()
    {
        document.getElementById("selectedModifieritemcontainerforedit").innerHTML="";
    }

    @* function need to be called after document get load *@ 

    $(document).ready(function () {

        PaginationAjax();
        ModifieritemsPaginationAjax();
        ModifieritemListForAddPaginationAjax();
        MenuitemsPaginationAjax();
        updateCheckboxStates();
    });

    let selectedModifiers = []; 
    let  selectedModifierIds = [];
    let selectedModifiersforedit = [];
    

    // Function to check checkboxes based on selectedModifiers
    function updateCheckboxStates() {

        console.log("inside upch")
        console.log(selectedModifierIdsforedit)
        document.querySelectorAll(".modifieritemcheckboxofmodal").forEach((checkbox) => {
            console.log(typeof checkbox.value)
            if (selectedModifierIdsforedit.includes(parseInt(checkbox.value))) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
                
            }
        });
    }

    // Function to handle checkbox selection
    function handleCheckboxChange(event) {
        let modifierId = event.target.value;

        if (event.target.checked) {
            if (!selectedModifierIdsforedit.some(modifier => modifier === parseInt(modifierId))) {
                @* selectedModifiers.push(modifierId); *@
                @* selectedModifiers.push({id:modifierId,name:event.target.getAttribute("m-name")}); *@
                selectedModifierIdsforedit.push(parseInt(modifierId));

                console.log("chbxchange",selectedModifierIdsforedit)
            }
        } else {
            selectedModifierIdsforedit = selectedModifierIdsforedit.filter(id => id !== modifierId);
        }
    }
    @* pwd *@
    function handleAddButtonClick() {
        console.log("Selected IDs:", selectedModifiers);
        console.log("Selected Names:", selectedModifierIdsforedit);
        // Perform further actions like submitting selectedModifiers to the server
        var itemlistmodal =bootstrap.Modal.getInstance(document.getElementById("modifieritemslist"))
        itemlistmodal.hide();


        selectedModifierIdsforedit.forEach(function (modifierId) {
            $.ajax({
                url: `/Menu/GetModifierItemsNamePVByModifieritemId`, // Update with your actual endpoint
                type: "GET",
                data: { modifier_id: modifierId },
                success: function (modifierData) {
                    let $partialView = $(modifierData);

                    $partialView.find(".delete-modifier-item").on("click", function () {
                    let itemId = $(this).attr("item-id");
                    console.log("itemid",itemId);
                    $partialView.remove();
                    selectedModifierIdsforedit = selectedModifierIdsforedit.filter(i => i != itemId);
                    console.log("Updated list after deletion:", selectedModifierIdsforedit);
                    });

                    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("editmodifiergroupmodal"))
                    modifiermodal.show();
                    $("#selectedModifieritemcontainerforedit").append($partialView);
                },
                error: function (error) {
                    console.error(`Error fetching details for Modifier ID ${modifierId}:`, error);
                }
            });
        });   
        
    }

    function attachCheckboxListeners() {
        document.querySelectorAll(".modifieritemcheckboxofmodal").forEach((checkbox) => {
            checkbox.addEventListener("change", handleCheckboxChange);
        });

        updateCheckboxStates(); // Re-check checkboxes after reloading the partial view
    }

    function onPartialViewLoaded() {
        attachCheckboxListeners();  // Rebind event listeners
    }
@* 
    $("#modifieritems-search-field").on('input',()=>{
        console.log("inside.........")
        PaginationAjax();
    }) *@

    document.getElementById("modifieritemsmodal-search-field").addEventListener('keyup',()=>{
        PaginationAjax();
    })
    document.getElementById("modifieritemsforaddmodal-search-field").addEventListener('keyup',()=>{
        ModifieritemListForAddPaginationAjax();
    })
    document.getElementById("modifieritems-search-field").addEventListener('keyup',()=>{
        ModifieritemsPaginationAjax();
    })
    document.getElementById("menuitem-search-field").addEventListener('keyup',()=>{
        console.log("hello")
        MenuitemsPaginationAjax();
    })


    $("#modifierForm").submit(function (e) {
        e.preventDefault(); // Prevent default form submission

        let formData = new FormData(this); 
        @* let form = $("#modifierForm"); *@
        // Append each selected modifier's id
        selectedModifiers.forEach(modifier => {
            formData.append("ModifieritemsId[]", modifier.id); 
        });

        $.ajax({
            url: $(this).attr("action"), // Get form action URL
            type: $(this).attr("method"), // Get form method (POST)
            data: formData,
            processData: false, // Prevent jQuery from processing the data
            contentType: false, // Prevent jQuery from setting content type
            success: function (response) {
                console.log("Success:", response);
                alert("Modifier group added successfully!");
            },
            error: function (error) {
                console.error("Error:", error);
                alert("Something went wrong!");
            }
        });
    
    });


    $("#editmodifierForm").submit(function(e) {
    e.preventDefault();

    var formData = new FormData(this);


    formData.append("ModifierItems", JSON.stringify(selectedModifierIdsforedit)); 

    $.ajax({
        url: "/Menu/EditModifierGroup",
        type: "POST",
        processData: false,
        contentType: false,
        data: formData,
        success: function(response) {
            @* window.location.href = response.redirectTo; *@
            location.reload();
        },
        error: function(err) {
            console.error("Error adding item:", err);
        }
    }); 
});


let  selectedModifierIdsforAdd= [];

     function ClearSectionforAdd() 
    { 
        document.getElementById("selectedModifieritemcontainer").innerHTML="";
    }
 $(document).ready(function () {

        updateCheckboxStatesForAdd();
    });

    
@* showing and hiding modal manually *@

@* document.getElementById("addexistingmodifierbtnforadd").addEventListener('click',()=>{
    
    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("addmodifiergroupmodal"))
    modifiermodal.hide();
    var itemlistmodal = new bootstrap.Modal(document.getElementById("modifieritemslist"))
    itemlistmodal.show();

}); *@

     // Function to check checkboxes based on selectedModifiers
    function updateCheckboxStatesForAdd() {

        console.log("inside add upch")
        console.log(selectedModifierIdsforAdd)
        document.querySelectorAll(".modifieritemcheckboxofaddmodal").forEach((checkbox) => {
          
            if (selectedModifierIdsforAdd.includes(parseInt(checkbox.value))) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
                
            }
        });
    }

    function attachCheckboxListenersforAddModal() {
        document.querySelectorAll(".modifieritemcheckboxofaddmodal").forEach((checkbox) => {
            checkbox.addEventListener("change", handleCheckboxChangeforAdd);
        });

        updateCheckboxStatesForAdd(); // Re-check checkboxes after reloading the partial view
    }

    
       

    // Function to handle checkbox selection
    function handleCheckboxChangeforAdd(event) {
        let modifierId = event.target.value;

        if (event.target.checked) {
            if (!selectedModifierIdsforAdd.some(modifier => modifier === parseInt(modifierId))) {
              
                selectedModifierIdsforAdd.push(parseInt(modifierId));

                console.log("chbxchange",selectedModifierIdsforAdd)
            }
        } else {
            selectedModifierIdsforAdd = selectedModifierIdsforAdd.filter(id => id !== modifierId);
        }
    }
   
    function handleAddButtonClickForAdd() {
        console.log("Selected IDs:", selectedModifierIdsforAdd);
       
        // Perform further actions like submitting selectedModifiers to the server
       
        

         var itemlistmodal =bootstrap.Modal.getInstance(document.getElementById("modifieritemslistforaddgroup"))
        itemlistmodal.hide();
 


        selectedModifierIdsforAdd.forEach(function (modifierId) {
            $.ajax({
                url: `/Menu/GetModifierItemsNamePVByModifieritemId`, // Update with your actual endpoint
                type: "GET",
                data: { modifier_id: modifierId },
                success: function (modifierData) {
                    let $partialView = $(modifierData);

                    $partialView.find(".delete-modifier-item").on("click", function () {
                    let itemId = $(this).attr("item-id");
                    console.log("itemid",itemId);
                    $partialView.remove();
                    selectedModifierIdsforAdd = selectedModifierIdsforAdd.filter(i => i != itemId);
                    console.log("Updated list after deletion:", selectedModifierIdsforAdd);
                    });
                    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("addmodifiergroupmodal"))
                    modifiermodal.show();
                    
                    $("#selectedModifieritemcontainer").append($partialView);
                },
                error: function (error) {
                    console.error(`Error fetching details for Modifier ID ${modifierId}:`, error);
                }
            });
        });   

        
        
    }

    $("#addModifierGroupForm").submit(function(e) {
    e.preventDefault();

    var formData = new FormData(this);


    formData.append("ModifierItems", JSON.stringify(selectedModifierIdsforAdd)); 

    $.ajax({
        url: "/Menu/AddModifierGroup",
        type: "POST",
        processData: false,
        contentType: false,
        data: formData,
        success: function(response) { 
            window.location.href = response.redirectTo;
        },
        error: function(err) {
            console.error("Error adding item:", err);
        }
    });
});


@* Delete Modifier Group *@

function setDeleteModifierGroupId(element) {

    var Id = element.getAttribute("data-id");
    var deleteBtn = document.getElementById("deleteModifierGroupBtn");
    deleteBtn.href = '@Url.Action("DeleteModifierGroupById", "Menu")' + '?id=' + Id;
}

 function setDeleteModifierid(element) {
        var modifiergroupid = element.getAttribute("modifiergroup-id");
        var modifierid = element.getAttribute("modifier-id");
        var deleteBtn = document.getElementById("deleteModifierItemBtn");
        deleteBtn.href = '@Url.Action("DeleteModifierItemById", "Menu")' + '?modifiergroupid=' + modifiergroupid+'&modifierid='+modifierid;
    }

function seteditmodifieritemdata(ele) {
    console.log("clicked")
    var c = JSON.parse(ele.getAttribute("item-obj"));
    var modifiergroup_id = ele.getAttribute("modifiergroup-id");
    console.log(c);

    var editmenuitem = document.getElementById("editmodifieritemmodal");
    editmenuitem.querySelector("#Rate").value = c.rate;
    editmenuitem.querySelector("#ModifierName").value = c.name;
    editmenuitem.querySelector("#Quantity").value = c.quantity;
    editmenuitem.querySelector("#Unit").value = c.unit;
    editmenuitem.querySelector("#ModifierGroupid").value = modifiergroup_id;
    editmenuitem.querySelector("#Description").value = c.description;
    editmenuitem.querySelector("#ModifierId").value = c.modifierId;

}

@* pwd *@
@* document.addEventListener("DOMContentLoaded", function () {
    
    // Select main checkbox

    document.addEventListener("change",function (){
    const mainCheckbox = document.getElementById("outer_checkbox_modifieritemmodal");
    const checkboxes = document.querySelectorAll(".inner_checkbox_modifieritemmodal");

    // When main checkbox is clicked
    mainCheckbox.addEventListener("change", function () {
        console.log("main checkbox change")
        checkboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked; // Set inner checkboxes same as main
        });
    });

    // If any inner checkbox is unchecked, uncheck the main checkbox
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            if (!this.checked) {
                mainCheckbox.checked = false;
            }
            // If all checkboxes are checked, also check the main checkbox
            else if (Array.from(checkboxes).every(chk => chk.checked)) {
                mainCheckbox.checked = true;
            }
        });
    });   
    });
    
}); *@

@* Mass Delete Of Menu Item *@

  $("#deletemassitemBtn").click(function (e) {
    var idlist = [];
    const checkboxes = document.querySelectorAll(".modifieritemcheckbox");
    var modgroupid = 0;
    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            modgroupid = checkbox.getAttribute("modifiergroup-id");
            idlist.push(
                checkbox.value
            );  // Fix: Use checkbox.value instead of this.value
        }
    });

    console.log(idlist)
    

    $.ajax({
        url: "/Menu/DeleteModifierItems",
        method: "POST",
        data:{
            ids: idlist,
            ModifierGroupid:modgroupid
        },  
        success: function (response) {
            console.log("Items deleted successfully");
            window.location.href='/Menu/Index?cat=@Model.SelectedCategory'; 
        },
        error: function (xhr, status, error) {
            console.error("Error deleting items:", error);
        }
    });
});

 

</script> 