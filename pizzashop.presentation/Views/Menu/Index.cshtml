@* @model IEnumerable<DAL.ViewModels.CategoryNameViewModel> *@
@model DAL.ViewModels.MenuViewModel;
@using DAL.ViewModels

@{
    ViewData["Category"] = Model.SelectedCategory;

   @* var categorymodel = new CategoryListModel
   {
        Catagories = Model.Categories,
        SelectedCategory = Model.SelectedCategory

   }; *@
}

<div class="Menu-container p-3">

    <h3 class="custom-blue">Menu</h3>


    <div class="switching-tabs-section d-flex justify-content-start gap-4 bg-white px-3 nav
                " role="tablist">

        <div class="d-flex justify-content-center gap-2 nav-link active p-3" id="nav-home-tab" data-bs-toggle="tab"
            data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">
            <div><img src="~/images/icons/list-check.svg" alt="" class="small-img"></div>
            <div>Items</div>
        </div>
        <div class="d-flex justify-content-center gap-2 nav-link p-3" id="nav-profile-tab" data-bs-toggle="tab"
            data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
            <div><img src="~/images/sidebar icons/dashboard.png" alt="" class="small-img"></div>
  
            <div class="">Modifiers</div>
        </div>


    </div>

    @* category list for samll screen *@

    <div class="CategoryForSmallScreen d-lg-none bg-white mt-2 p-2 ">

       
        <div class="d-flex justify-content-between align-items-center p-1">
            <h5 class="custom-blue">Category</h5>
            <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;" data-bs-toggle="modal"
                data-bs-target="#staticBackdrop">+
            </div>
        </div>
        <div class="d-flex flex-column p-2 gap-4 fw-medium overflow-auto h-100">
             @foreach(var c in Model.Categories){
            <div class="category-option-smallscreen d-flex justify-content-start align-items-center gap-2 ">
                <img src="~/images/icons/grid-3x2-gap-fill.svg" alt="" class="category-option-img">
                <div>@c.Name</div>
            </div>
        }
            
        </div>
    </div>

 
    <div class="tab-content bg-white mt-2 bg-white position-relative " id="nav-tabContent">

        @* ----first tab------- *@

        <div class="tab-pane fade show active w-100" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab"
            tabindex="0">
            <div class="d-flex w-100">
                <div class=" category-menu border-0 pt-3 d-none d-lg-block" id="category-menu">
                    <div class="d-flex justify-content-between align-items-center p-1">
                        <h5 class="custom-blue">Category</h5>
                        <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;"
                            data-bs-toggle="modal" data-bs-target="#staticBackdrop">+
                        </div>
                    </div>
                    <div class="d-flex flex-column p-2 mt-5 gap-4 fw-medium overflow-auto h-75" id="category-list">

                        @* category list  *@

                        @* -------partial view here of category list-------- *@

                    </div>

                </div>
                <div class="d-flex flex-column flex-grow-1 pt-3 px-3 w-100 ">
                    <div class="d-flex justify-content-between">
                        <h5 class="custom-blue">Items</h5>
                    </div>
                    <div
                        class="search-delete-section d-flex justify-content-start justify-content-md-end align-items-center">
                        <div class="search-section d-flex gap-2 ">
                            <div class="position-relative" style="width: 180px;">
                                <input type="text" class="p-2 w-100" placeholder="Search" id="menuitem-search-field">
                                <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                            </div>
                            <div class="d-flex justify-content-center align-items-center w-auto border rounded px-3 " style="cursor: pointer;"  data-bs-toggle="modal" data-bs-target="#deleteitemmodal">
                                <img src="~/images/icons/trash.svg" alt="" srcset="" style="width: 20px;"
                                    class="small-img" >
                            </div>
                            <button type="button" class=" custom-btn-bg text-white p-2 border d-none d-md-block" data-bs-toggle="modal" data-bs-target="#addmenuitem"><span
                                    class="fs-5 fw-semibold" >+</span> New
                                Item</button>
                            <button type="button"
                                class=" custom-btn-bg text-white px-3 border fs-5 fw-bold d-md-none">+</button>
                        </div>
                    </div>
                    <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="menuTableContainer">
                       
                    </div> 
                   
                </div>

            </div>

        </div>
        @* -----------second tab------------ *@
            <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0">
                <div class="d-flex w-100">
                <div class=" category-menu border-0 pt-3 d-none d-lg-block">
                    <div class="d-flex justify-content-between align-items-center p-1">
                        <h5 class="custom-blue">Modifier Groups</h5>
                        <div class="custom-blue-border custom-blue px-2 rounded" style="font-size: 20px;"
                            data-bs-toggle="modal" data-bs-target="#addmodifiergroupmodal">+
                        </div>
                    </div>
                    <div class="d-flex flex-column p-2 mt-5 gap-4 fw-medium overflow-auto h-75" id="modifier-list">

                    @* category list  *@

                        @* @foreach (var m in Model.ModifierGroups)
                        {
                            <div
                                class="category-option d-flex justify-content-between align-items-center gap-2 @(Model.SelectedModifierGroup == m.ModifiergroupId?"category-active-option":"")" id="category_option" ModifierGroup-name="@m.Name" >
                                <div class="d-flex gap-2" style="cursor: pointer;" onclick="loaditems(this)" ModifierGroup-name="@m.Name">
                                    <img src="~/images/icons/grid-3x2-gap-fill.svg" alt="" class="category-option-img ">
                                    <div>@m.Name</div>
                                </div>
                               
                                <div class="d-flex justify-content-between gap-3 d-none" id="categoryoption_actionbtn">
                                  
                                        <img src="~/images/icons/pen.svg" alt="" data-bs-toggle="modal" data-bs-target="#editcategory" onclick="setEditData(this)" data-id="@m.ModifiergroupId" data-name="@m.Name" data-description="@m.Description" obj="@m">
                                    
                                    <img src="~/images/icons/trash.svg" data-bs-toggle="modal"
                                        data-bs-target="#deletecategorymodal" onclick="setDeleteUserId(this)" data-id="@m.ModifiergroupId"
                                        alt="">
                                </div>
                            </div>
                        } *@
                        @* @Html.PartialAsync("~/Views/Shared/_SideList",Model) *@

                    </div>

                </div>
                <div class="d-flex flex-column flex-grow-1 pt-3 px-3 w-100 ">
                    <div class="d-flex justify-content-between">
                        <h5 class="custom-blue">Items</h5>
                    </div>
                    <div
                        class="search-delete-section d-flex justify-content-start justify-content-md-end align-items-center">
                        <div class="search-section d-flex gap-2 ">
                            <div class="position-relative" style="width: 180px;">
                                <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritems-search-field">
                                <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                            </div>
                            <div class="d-flex justify-content-center align-items-center w-auto border rounded px-3 " style="cursor: pointer;"  data-bs-toggle="modal" data-bs-target="#deleteitemmodal">
                                <img src="~/images/icons/trash.svg" alt="" srcset="" style="width: 20px;"
                                    class="small-img" >
                            </div>
                            <button type="button" class=" custom-btn-bg text-white p-2 border d-none d-md-block" data-bs-toggle="modal" data-bs-target="#addmenuitem"><span
                                    class="fs-5 fw-semibold" >+</span> New
                                Item</button>
                            <button type="button"
                                class=" custom-btn-bg text-white px-3 border fs-5 fw-bold d-md-none">+</button>
                        </div>
                    </div>
                    <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainer">
                       
                    </div> 
                   
                </div>

            </div>
            </div>
    </div>


    <!-- add category modal -->
    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add Category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="Menu" asp-controller="Menu" method="post">
                    <div class="modal-body">
                        <div class="d-flex flex-column">

                            <div class="mb-3">

                                <input type="text" class="form-control p-3" id="exampleFormControlInput1" name="Name"
                                    placeholder="Name">
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"
                                    placeholder="Description" name="Description"></textarea>
                            </div>
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                         </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

     <!-- add modifierGroup modal -->
    <div class="modal fade" id="addmodifiergroupmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add ModifierGroup</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="AddModifierGroup" asp-controller="Menu" method="post" id="modifierForm">
                    <div class="modal-body">
                        <div class="d-flex flex-column"> 

                            <div class="mb-3">
                                <input type="text" class="form-control p-3" name="Name"
                                    placeholder="Name">
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" rows="3"
                                    placeholder="Description" name="Description"></textarea>
                            </div>

                            <div class="custom-blue mb-2 fs-sm cursor-pointer" id="addexistingmodifierbtn">
                                Add Existing Modifiers +
                            </div>

                            <div class="d-flex gap-2 flex-wrap" id="selectedModifieritemcontainer">
                            
                            @* ---- selected modifier name here ---- *@
                           
                            </div>
                           
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                         </div>
                    </div>

                    

                </form>
            </div>
        </div>
    </div>
     <!-- Edit modifierGroup modal -->
    <div class="modal fade" id="editmodifiergroupmodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Edit ModifierGroup</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="AddModifierGroup" asp-controller="Menu" method="post" id="editmodifierForm">
                    <div class="modal-body">
                        <div class="d-flex flex-column"> 
                                 <input type="text" class="form-control p-3" name="Id"
                                    placeholder="Name" id="editmodifiergroupid" hidden>
                            <div class="mb-3">
                                <input type="text" class="form-control p-3" name="Name"
                                    placeholder="Name" id="editmodifiergroupname">
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" rows="3"
                                    placeholder="Description" name="Description" id="editmodifiergroupdescription"></textarea>
                            </div>

                            <div class="custom-blue mb-2 fs-sm cursor-pointer" id="addexistingmodifierbtnforedit">
                                Add Existing Modifiers +
                            </div>

                            <div class="d-flex gap-2 flex-wrap" id="selectedModifieritemcontainerforedit">
                            
                            @* ---- selected and existing modifier name here ---- *@
                           
                            </div>
                           
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                            <button type="submit" class="btn custom-btn-bg text-white fw-medium">Save</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="ClearSection()">Cancel</button>
                         </div>
                    </div>

                    

                </form>
            </div>
        </div>
    </div>

     <!-- show modifieritemslist modal -->
    <div class="modal fade" id="modifieritemslist" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-secondary" id="staticBackdropLabel">Select Existing Modifier</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="position-relative m-2" style="width: 280px;">
                    <input type="text" class="p-2 w-100" placeholder="Search" id="modifieritemsmodal-search-field">
                    <img src="~/images/icons/search.svg" alt="" class="searchicon-img">
                </div>
                <div class="table-section bg-white table-responsive mt-5 ms-2 me-2" id="modifieritemstablecontainerofmodal">
                       
                </div> 
                <div class="d-flex justify-content-end gap-2 p-2">
                    <button  class="btn custom-btn-bg text-white fw-medium" onclick="handleAddButtonClick()">Add</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
                
        </div>
    </div>

      @* ---------------- Delete category modal body------------------- *@

    <div class="modal" tabindex="-1" id="deletecategorymodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">

                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete this Category?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteCategoryBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-3" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    @* -------------------------------------------------------------- *@


    @* edit category modal *@

     <div class="modal fade" id="editcategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">edit Category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="EditCategoryById" asp-controller="Menu" method="post" id="editcategoryform">
                    <div class="modal-body">
                        <div class="d-flex flex-column">
                            <input type="text" id="editcategoryid" name="Id" hidden>

                            <div class="mb-3">

                                <input type="text" class="form-control p-3" id="editcategoryformname" name="Name"
                                    placeholder="Name">
                            </div>
                            <div class="mb-3">

                                <textarea class="form-control" id="editcategoryformdescription" rows="3"
                                    placeholder="Description" name="Description"></textarea>
                            </div>
                        </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium">Edit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>
</div>

 @* Add Menu Item modal *@

     <div class="modal fade " id="addmenuitem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Add New Menu Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addItemForm" enctype="multipart/form-data" >
                    <div class="modal-body">
                         <div class="add-menu-item row">

                                <div class="col-8">

                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="form-floating col">
                                    <div class="form-floating col">
                                        <select  class="form-select" id="Category" name="CategoryId">
                                            @* <option selected>Select Categories</option> *@
                                            @foreach(var c in Model.Categories){
                                                if(c.Id == Model.SelectedCategory){
                                                    <option value=@c.Id selected>@c.Name</option>
                                                }else{

                                                <option value=@c.Id>@c.Name</option>
                                                }
                                            }
                                        </select>
                                        <label for="floatingSelect">Categories</label>
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" name="Type">
                                            <option selected>Select a Type</option>
                                            <option value="Veg">Veg</option>
                                            <option value="Non-Veg">Non-Veg</option>
                                        </select>
                                        <label for="floatingSelect">Item Type</label>
                                    </div>
                                </div>

                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" name="Rate">
                                        <label for="floatingInput">Rate</label>
                                    </div>
                                </div>

                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" name="Isavailable" value="true">
                                        <span class="ms-3">Available</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" name="DefaultTax" value="true">
                                        <span class="ms-3">Default Tax</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="row">
                                <div class="col">
                                    <input class="form-control form-control p-3" type="text" placeholder="Name" name="ItemName" >
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="floatingInput" value="0" name="Quantity">
                                        <label for="floatingInput">Quantity</label>
                                    </div>
                                </div>
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" name="Unit">
                                            <option selected>Select a Unit</option>

                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                    </div>
                                </div>



                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Tax Percentage" name="TaxPercentage">
                                </div>
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Short Code" name="ShortCode">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="form-floating">
                            <textarea class="form-control"  id="floatingTextarea" style="height: 100px" name="Description"></textarea>
                            <label for="floatingTextarea">Description</label>
                          </div>
                    </div>

                    <div class="row mt-4">
                        <div>
                            <input type="file" id="" class="bg-primary w-100 file-input position-absolute opacity-0" name="Image">
                            <div class="d-flex flex-column w-100 align-items-center border rounded py-4 gap-2 bg-white">
                                <img src="~/images/icons/cloud-upload.svg" alt="" srcset="" class="">
                                <div>Browse Files</div>
                            </div>
                        </div>
                    </div> 
                                </div>
        
                                 <div class="col-4" style="background-color: #fff5d7;">
                                <div class="form col-12">
                                    <div class="row mt-2">
                                        <div class="form col multiselect">
                                        <select  class="form-select selectBox" id="modifierGroupSelect">
                                                <option selected>Select Modifier Group</option>

                                                @* showing options for all modifiergroup name *@
                                                @foreach(var m in @Model.ModifierGroups)
                                                {
                                                    <option value=@m.ModifiergroupId>@m.Name</option>
                                                }
                                        </select>

                                        <div id="checkboxes" class="d-flex flex-column bg-white rounded d-none p-2">

                                         </div>

                                    </div>
                                    </div>

                                </div>
                                 </div>
                         </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="editmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>

@* Edit Menu Item Modal *@
    
    <div class="modal fade " id="editmenuitem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered w-75 "  style="max-width: 100%">
            <div class="modal-content w-100">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Edit Menu Item</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addItemForm" enctype="multipart/form-data" asp-action="EditItem" asp-controller="Menu" method="post" >
                    <div class="modal-body">
                         <div class="add-menu-item row">

                            <input name="Id" id ="itemId"  hidden>

                                <div class="col-8">

                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="form-floating col">
                                    <div class="form-floating col">
                                        <select  class="form-select" id="Category" name="CategoryId">
                                            @* <option selected>Select Categories</option> *@
                                            @foreach(var c in Model.Categories){
                                                if(c.Id == Model.SelectedCategory){
                                                    <option value=@c.Id selected>@c.Name</option>
                                                }else{

                                                <option value=@c.Id>@c.Name</option>
                                                }
                                            }
                                        </select>
                                        <label for="floatingSelect">Categories</label>
                                    </div>
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="form-floating col-6">
                                    <div class="form-floating col"> 
                                        <select  class="form-select" name="Type" id="type">
                                            <option selected>Select a Type</option>
                                            <option value="Veg">Veg</option>
                                            <option value="Non-Veg">Non-Veg</option>
                                        </select>
                                        <label for="floatingSelect">Item Type</label>
                                    </div>
                                </div>

                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="Rate" value="0" name="Rate">
                                        <label for="floatingInput">Rate</label>
                                    </div>
                                </div>

                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" name="Isavailable" id="Isavailable" value="true">
                                        <span class="ms-3">Available</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input toggle-btn" type="checkbox" role="switch" name="DefaultTax" id="DefaultTax" value="true">
                                        <span class="ms-3">Default Tax</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="row">
                                <div class="col">
                                    <input class="form-control form-control p-3" type="text" placeholder="Name" name="ItemName" id="itemname">
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="form-floating">
                                        <input type="number" class="form-control"  value="0" name="Quantity" id="Quantity">
                                        <label for="floatingInput">Quantity</label>
                                    </div>
                                </div>
                                <div class="form-floating col-6">
                                    <div class="form-floating col">
                                        <select  class="form-select" name="Unit" id ="Unit">
                                            <option selected>Select a Unit</option>
                                            <option value="Pcs">Piece</option>
                                            <option value="Kg">Kilogram</option>
                                            <option value="In">Inches</option>
                                            <option value="Ltr">Liter</option>
                                        </select>
                                        <label for="floatingSelect">Unit</label>
                                    </div>
                                </div>



                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Tax Percentage" name="TaxPercentage" id="TaxPercentage">
                                </div>
                                <div class="col-6">
                                    <input class="form-control form-control p-3" type="text" placeholder="Short Code" name="ShortCode" id="ShortCode">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="form-floating">
                            <textarea class="form-control"  style="height: 100px" name="Description" id="Description"></textarea>
                            <label for="floatingTextarea">Description</label>
                          </div>
                    </div>

                    <div class="row mt-4">
                        <div>
                            <input type="file" id="" class="bg-primary w-100 file-input position-absolute opacity-0" name="Image">
                            <div class="d-flex flex-column w-100 align-items-center border rounded py-4 gap-2 bg-white">
                                <img src="~/images/icons/cloud-upload.svg" alt="" srcset="" class="">
                                <div>Browse Files</div>
                            </div>
                        </div>
                    </div> 
                                </div>
        
                                 <div class="col-4" style="background-color: #fff5d7;">
                                <div class="form col-12">
                                    <div class="row mt-2">
                                        <div class="form col multiselect">
                                        <div  class="form-select selectBox" id="modifierGroupSelect" onclick="showCheckboxes()">
                                            @* <option selected>Select Modifiers Group</option> *@
                                            Select Modifier Group
                                        </div>

                                        <div id="checkboxes" class="d-flex flex-column bg-white rounded d-none p-2">

                                         </div>

                                    </div>
                                    </div>

                                </div>
                                 </div>
                         </div>
                         <div class="d-flex justify-content-end gap-2 p-2">
                        <button type="submit" class="btn custom-btn-bg text-white fw-medium" id="editmodalbtn">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                       
                </form>
            </div>
        </div>
    </div>


      @* ---------------- Delete item modal body------------------- *@

    <div class="modal" tabindex="-1" id="deleteitemmodal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3" style="width: 420px !important;">
                <div class="modal-body">
                    <div class="d-flex justify-content-center"><img src="~/images/warning.png" alt="" width="40"></div>
                    <div class="d-flex justify-content-center mt-3">Are You Sure You Want To Delete This Item?</div>
                </div>
                <div class="d-flex justify-content-center align-items-center gap-2">
                    <a id="deleteitemBtn">
                        <button type="button" class="btn btn-primary px-4">Yes</button>
                    </a>
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
    @* -------------------------------------------------------------- *@
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>



 

    function setEditData(element){
    

        var userId = element.getAttribute("data-id");
        var name =  element.getAttribute("data-name")
        var description = element.getAttribute("data-description");
        var editBtn = document.getElementById("editmodalbtn");
        document.getElementById("editid").value=userId;
        document.getElementById("editformname").value=name;
        document.getElementById("editformdescription").value=description;
        @* editBtn.href = '@Url.Action("Menu", "Menu")' + '?id=' + userId; *@
    }

    function setDeleteUserId(element) {
        var Id = element.getAttribute("data-id");
        var deleteBtn = document.getElementById("deleteCategoryBtn");
        deleteBtn.href = '@Url.Action("DeleteCategory", "Menu")' + '?id=' + Id;
    }
    @* ----Load ModifierGroup List------- *@

    function loadmodifiers(ele)
    {
        var id = ele.getAttribute("modifiergroup-id");

        $.ajax({
            type:"GET",
            url:"/Menu/GetModifiers",
            data:{modifiergroup_id : id},
            success:function(data)
            {
                $('#modifier-list').html(data);
            }
        });

        $.ajax({
            url: '@Url.Action("GetModifierItemsList", "Menu")',
            type: 'GET',
            data: {modifiergroup_id:id},
            success: function (data) {
                $('#modifieritemstablecontainer').html(data);
            }
        });
    }
    @* -----Load Category List -----*@
    function loadcategories(ele)
    {
    
    var id = ele.getAttribute("category-id");
    console.log(id)
        $.ajax({
            type:"GET",
            url:"/Menu/GetCategories",
            data:{cat : id},
            success:function(data)
            {
                $('#category-list').html(data);
            }

        });

        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: {cat:id},
            success: function (data) {
                $('#menuTableContainer').html(data);
            }
        });
    }

    document.addEventListener("DOMContentLoaded", () => {

    @* let activeTab = localStorage.getItem("activeTab");

    if (activeTab) {
        let tabElement = document.querySelector(`[data-tab="${activeTab}"]`);
        if (tabElement) {
            new bootstrap.Tab(tabElement).show();
        }
    }

    // Listen for tab change and store active tab in localStorage
    document.querySelectorAll("#myTabs .nav-link").forEach(tab => {
        tab.addEventListener("shown.bs.tab", function (event) {
            let selectedTab = event.target.getAttribute("data-tab");
            localStorage.setItem("activeTab", selectedTab);
        });
    }); *@

    var categoryoption = document.querySelectorAll(".category-option");

    categoryoption.forEach(opt => {
        opt.addEventListener("mouseover", function() {
            console.log("mouseleave enter")
            var actionbtn = opt.querySelector("#categoryoption_actionbtn");
            
            actionbtn.classList.remove("d-none");
            actionbtn.classList.add("d-block");
        });
        opt.addEventListener("mouseleave", function() {
            var actionbtn = opt.querySelector("#categoryoption_actionbtn");
            actionbtn.classList.remove("d-block");
            actionbtn.classList.add("d-none");
        });
    });



        const categories = document.querySelectorAll(".category-option");
        const categoriesforsmall = document.querySelectorAll(".category-option-smallscreen");
    

        if (categories.length > 0) {
            // Select the first category by default
            @* categories[0].classList.add("category-active-option");
            categoriesforsmall[0].classList.add("category-active-option"); *@
        }

        categories.forEach(category => {
            category.addEventListener("click", () => {
                // Remove the active class from all categories
                categories.forEach(cat => cat.classList.remove("category-active-option"));

                // Add active class to the clicked category
                category.classList.add("category-active-option");
            });
        });
        categoriesforsmall.forEach(category => {
            category.addEventListener("click", () => {
                // Remove the active class from all categories
                categoriesforsmall.forEach(cat => cat.classList.remove("category-active-option"));

                // Add active class to the clicked category
                category.classList.add("category-active-option");
            });
        });
    });

    let currentPage = 1;
    $(document).ready(function () {
        currentPage =1;
         

        $.ajax({
            type:"GET",
            url:"/Menu/GetCategories",
            data:{cat : @Model.SelectedCategory},
            success:function(data)
            {
                $('#category-list').html(data);
            }

        });

        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: {cat:"@Model.SelectedCategory"},
            success: function (data) {
                $('#menuTableContainer').html(data);
            }
        });

        $.ajax({
            type:"GET",
            url:"/Menu/GetModifiers",
            success:function(data)
            {
                $('#modifier-list').html(data);
            }

        });

        $.ajax({
            url: '@Url.Action("GetModifierItemsList", "Menu")',
            type: 'GET',
            data: {modifiergroup_id:@Model.SelectedModifierGroup},
            success: function (data) {
                $('#modifieritemstablecontainer').html(data);
            }
        });
        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: {cat:@Model.SelectedCategory},
            success: function (data) {
                $('#menuTableContainer').html(data);
            }
        });
        
        @* $.ajax({
            url: '@Url.Action("GetAllModifierItemsList", "Menu")',
            type: 'GET',
            success: function (data) {
                $('#modifieritemstablecontainerofmodal').html(data);
            }
        }); *@
         
    });

    @* function loadMenuTable(pageNumber, pageSize,cat) {
        $.ajax({
            url: '@Url.Action("Menu", "Menu")',
            type: 'GET',
            data: { pageNumber: pageNumber, pageSize: pageSize,cat:cat},
            success: function (data) {
                $('#menuTableContainer').html(data);
            }
        });
    } *@

     


    function setDeleteUserId(element) {
        var userId = element.getAttribute("data-id");
        var deleteBtn = document.getElementById("deleteUserBtn");
        deleteBtn.href = '@Url.Action("DeleteUser", "Menu")' + '?id=' + userId;
    }
    @* document.getElementById("search-field").addEventListener("keyup", function (event) {
        search();
    }); *@

    @* for getting modifier group option list *@
    $.ajax({
        type: "GET",
        url: "/GetData/GetModifierGroupList",
        dataType: "json",
        success: function(result) {
            console.log(result);
            for(let i=0;i<result.length;i++)
            {
                @* $("#modifierGroupSelect").append(`<option value="${result[i].ModifiergroupId}">${result[i].name}</option>`); *@
                $("#checkboxes").append(`<div class="form-check">
                <input class="form-check-input" type="checkbox" name="Modifiers" value="${result[i].modifiergroupId}">
                <label class="form-check-label" for="flexCheckDefault">
                    ${result[i].name}
                 </label>
                </div>`);
            }   
         }
    });
    var expanded = false;

function showCheckboxes() {
    console.log("click")
  var checkboxes = document.getElementById("checkboxes");
  if (!expanded) {
    checkboxes.classList.remove('d-none');
    checkboxes.classList.add('d-block');
    expanded = true;
  } else {
    checkboxes.classList.remove('d-block');
    checkboxes.classList.add('d-none');
    expanded = false;
  }
}

$("#addItemForm").submit(function (e) {
    e.preventDefault();
    $('#addmenuitem').modal('hide'); 
    console.log("inside form")
    let formData = new FormData(this);

    // Get checked modifier values
    let selectedModifiers = [];
    $("input[name='Modifiers']:checked").each(function () {
        selectedModifiers.push($(this).val());
    });

    formData.append("Modifiers", selectedModifiers);
    console.log(selectedModifiers);
    $.ajax({
        type: "POST",
        url: "/Menu/AddNewItem",
        data: formData,
        contentType: false,
        processData: false,
        success:function (response){
            @* TempData["ToastrType"] = "success";  
            TempData["ToastrMessage"] = "item add Successfully!"; *@
            if (response.redirectTo) {
            window.location.href = response.redirectTo;  // Manually redirect
        }
             
            
        } 
    });
});

function setedititemdata(ele)
{
    var c = JSON.parse(ele.getAttribute("item-obj"));
    console.log(c);

    var editmenuitem = document.getElementById("editmenuitem");
    editmenuitem.querySelector("#Rate").value =c.rate;
    editmenuitem.querySelector("#type").value =c.type;
    editmenuitem.querySelector("#Isavailable").checked =c.isavailable?true:false;
    editmenuitem.querySelector("#itemname").value =c.itemName;
    editmenuitem.querySelector("#Quantity").value =c.quantity;
    editmenuitem.querySelector("#Unit").value =c.unit;
    editmenuitem.querySelector("#TaxPercentage").value =c.taxPercentage;
    editmenuitem.querySelector("#ShortCode").value =c.shortCode;
    editmenuitem.querySelector("#Description").value =c.description;
    editmenuitem.querySelector("#DefaultTax").checked =c.defaultTax?true:false;
    editmenuitem.querySelector("#itemId").value =c.itemId;
}


@* ---------- Menu Items Functionality------------ *@

@* select All inner checkbox based on main checkbox *@

document.addEventListener("DOMContentLoaded", function () {

    console.log("Dom loaded")
    // Select main checkbox

    document.addEventListener("change",function (){
    const mainCheckbox = document.getElementById("menu-main-checkbox");
    const checkboxes = document.querySelectorAll(".inner_checkbox");

    // When main checkbox is clicked
    mainCheckbox.addEventListener("change", function () {
        console.log("main checkbox change")
        checkboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked; // Set inner checkboxes same as main
        });
    });

    // If any inner checkbox is unchecked, uncheck the main checkbox
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            if (!this.checked) {
                mainCheckbox.checked = false;
            }
            // If all checkboxes are checked, also check the main checkbox
            else if (Array.from(checkboxes).every(chk => chk.checked)) {
                mainCheckbox.checked = true;
            }
        });
    });
    });
    
});

@* Mass Delete Of Menu Item *@

  $("#deleteitemBtn").click(function (e) {
    var idlist = [];
    const checkboxes = document.querySelectorAll(".inner_checkbox");

    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            idlist.push(checkbox.value);  // Fix: Use checkbox.value instead of this.value
        }
    });

    console.log(idlist)
    

    $.ajax({
        url: "/Menu/Deleteitems",
        method: "POST",
        data:{
            ids: idlist
         },  
        success: function (response) {
            console.log("Items deleted successfully");
            window.location.href='/Menu/Index?cat=@Model.SelectedCategory'; 
        },
        error: function (xhr, status, error) {
            console.error("Error deleting items:", error);
        }
    });
});

@* Delete single Menu item *@

function setDeleteItemId(element) {

    var Id = element.getAttribute("item-id");
    let cat_id= $("#category-list .category-active-option").attr("category-id");
    var deleteBtn = document.getElementById("deleteitemBtn");
    deleteBtn.href = '@Url.Action("DeleteSingleItem", "Menu")' + '?id=' + Id+'&catid='+cat_id;

}


@* showing and hiding modal manually *@

document.getElementById("addexistingmodifierbtn").addEventListener('click',()=>{
    
    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("addmodifiergroupmodal"))
    modifiermodal.hide();
    var itemlistmodal = new bootstrap.Modal(document.getElementById("modifieritemslist"))
    itemlistmodal.show();

});

document.getElementById("addexistingmodifierbtnforedit").addEventListener('click',()=>{
    
    var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("editmodifiergroupmodal"))
    modifiermodal.hide();
    ClearSection();
    var itemlistmodal = new bootstrap.Modal(document.getElementById("modifieritemslist"))
    itemlistmodal.show();

});

@* -----Pagination For Menu Items List------- *@

function MenuitemsPaginationAjax(pageSize,pageNumber,category_id) {
     // Get the dropdown element

    let cat_id= $("#category-list .category-active-option").attr("category-id");
    let pageSizeDropdown = document.getElementById("pageSizeDropdownforMenuitems");
    console.log(pageSizeDropdown.value);
    let searchkeyword = $("#menuitem-search-field").val();

    console.log("inside item",searchkeyword) 
    console.log("param id",category_id)
    console.log("get id",cat_id)
       
        $.ajax({
            url: "/Menu/Menu",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword,'cat':cat_id},
            type: "GET",
            dataType: "html",
            success: function (data) {
                $("#menuTableContainer").html(data);
                @* onPartialViewLoaded();  *@
            },
            error: function () {
                @* $("#modifieritemstablecontainer").html('An error has occurred'); *@
            }
        });
    }



@* -----Pagination For Modifier Items List Modal------- *@
function PaginationAjax(pageSize,pageNumber) {

     // Get the dropdown element
    let pageSizeDropdown = document.getElementById("pageSizeDropdownformodal");
    let searchkeyword = $("#modifieritemsmodal-search-field").val();
    console.log(searchkeyword)
    
    // Store the currently selected value
    let selectedPageSize = pageSizeDropdown?.value;

    console.log("inside pag ajax",pageSize)
        @* if (pageNumber === 0) {
            pageNumber = @((Model?.Page?.CurrentPage ?? 1));
        } *@
        $.ajax({
            url: "/Menu/GetAllModifierItemsList",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword},
            type: "GET",
            dataType: "html",
            success: function (data) {
                $("#modifieritemstablecontainerofmodal").html(data);
                onPartialViewLoaded(); // Ensure checkboxes update after reloading the partial
            },
            error: function () {
                alert("No Projects Found");
                
                $("#modifieritemstablecontainerofmodal").html('An error has occurred');
            }
        });
    }

@* -----Pagination For Modifier Items List------- *@

function ModifieritemsPaginationAjax(pageSize,pageNumber,modifiergroup_id) {
     // Get the dropdown element
   
    modifiergroup_id = $("#modifier-list .category-active-option").attr("modifiergroup-id");
    let pageSizeDropdown = document.getElementById("pageSizeDropdownformodal");
    let searchkeyword = $("#modifieritems-search-field").val();

    console.log("inside pag ajax",pageSize) 
       
        $.ajax({
            url: "/Menu/GetModifierItemsList",
            data: { 'pageSize': pageSize, 'pageNumber': pageNumber,'searchKeyword':searchkeyword,'modifiergroup_id':modifiergroup_id},
            type: "GET",
            dataType: "html",
            success: function (data) {
                $("#modifieritemstablecontainer").html(data);
                @* onPartialViewLoaded();  *@
            },
            error: function () {
                @* $("#modifieritemstablecontainer").html('An error has occurred'); *@
            }
        });
    }

    @* ---- Category Functionality ---- *@

    @* Edit Category *@

    function setEditCategoryData(ele)
    {
        var c = JSON.parse(ele.getAttribute("item-obj"));

        // Set the values in the modal form
        document.getElementById("editcategoryid").value = c.id;
        document.getElementById("editcategoryformname").value = c.name;
        document.getElementById("editcategoryformdescription").value = c.description;

    }

    @* Delete Category *@

    function setDeleteCategoryId(ele)
    {
        let id = ele.getAttribute('category-id');
        let deleteBtn = document.getElementById("deleteCategoryBtn");
        deleteBtn.href = '@Url.Action("DeleteCategory", "Menu")' + '?id=' + id;
    }

    @* edit category form submit *@

    @* $("#editcategoryform").submit(function (event) {
        event.preventDefault(); // Prevent the default form submission

        let formData = new FormData(this); // Get form data
        console.log("Name:", $("#editformname").val());
        console.log(formData);

        $.ajax({
            url: "/Menu/EditCategory", // Update with your actual controller action URL
            type: "POST",
            data: formData,
            processData: false,  // Don't process the files
            contentType: false,  // Don't set contentType (so multipart/form-data works)
            success: function (response) {
                // Handle success response
                console.log("Category updated successfully", response);

                // Close the modal
                $("#editcategory").modal("hide");

                // Optionally refresh the category list or update UI dynamically
                location.reload(); // Or update the specific section dynamically
            },
            error: function (xhr, status, error) {
                // Handle error
                console.error("Error updating category:", error);
                alert("Failed to update category. Please try again.");
            }
        });
    }); *@


    @* ---------------------------------- *@

    @* ---- Modifier Functionality------ *@

    @* function for getting modifier item name which is related to perticular modifier group *@

    function GetModifierItemListByGroupid(ele)
    {   
        let obj = JSON.parse(ele.getAttribute('data-obj'));
        let modifiergroupid = obj.modifiergroupId;
        let name = obj.name;
        let description = obj.description;
       
        $.ajax({
        url: `/Menu/GetModifierItemsNameByModifierGroupid`,
        type: "GET",
        data: { modifiergroup_id: modifiergroupid },
        success: function (data) {
            console.log("Modifier Items:", data);

            document.getElementById("editmodifiergroupid").value = modifiergroupid;
            document.getElementById("editmodifiergroupname").value = name;
            document.getElementById("editmodifiergroupdescription").value = description;

            data.forEach((item)=>{
           
            document.getElementById("selectedModifieritemcontainerforedit").innerHTML += `<span class="border rounded-pill px-3 py-1" style="width: fit-content;">
                ${item.modifierName}
                    <span> <img src="/images/icons/x-lg.svg" alt=""> </span>
                </span>`;
        })
        },
        error: function (error) {
            console.error("Error fetching modifiers:", error);
        }
    });
    }

    @* clear the existing modifier section when closing modal *@

    function ClearSection()
    {
        document.getElementById("selectedModifieritemcontainerforedit").innerHTML="";
    }


    @* function need to be called after document get load *@ 

    $(document).ready(function () {
        PaginationAjax();
        ModifieritemsPaginationAjax();
        MenuitemsPaginationAjax();
        updateCheckboxStates();
    });

    let selectedModifiers = [];
    let  selectedModifierIds = [];
    let selectedModifiersforedit = [];
    let  selectedModifierIdsforedit = [];

    // Function to check checkboxes based on selectedModifiers
    function updateCheckboxStates() {
        document.querySelectorAll(".modifieritemcheckboxofmodal").forEach((checkbox) => {
            if (selectedModifiers.includes(checkbox.value)) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
        });
    }

     // Event Listener for checkboxes
    document.addEventListener("change", function (event) {
        if (event.target.classList.contains("modifieritemcheckboxofmodal")) {
            let modifierId = event.target.value;
            
            if (event.target.checked) {
                if (!selectedModifiers.some(modifier => modifier.id === modifierId)) {
                    selectedModifiers.push({id:modifierId,name:event.target.getAttribute("m-name")});
                    selectedModifierIds.push(modifierId);
                }
            } else {
                selectedModifiers = selectedModifiers.filter(id => id !== modifierId);
            }
        }
    });

    // Function to handle checkbox selection
    function handleCheckboxChange(event) {
        let modifierId = event.target.value;

        if (event.target.checked) {
            if (!selectedModifiers.some(modifier => modifier.id === modifierId)) {
                @* selectedModifiers.push(modifierId); *@
                selectedModifiers.push({id:modifierId,name:event.target.getAttribute("m-name")});
                selectedModifierIds.push(modifierId);
            }
        } else {
            selectedModifiers = selectedModifiers.filter(id => id !== modifierId);
        }
    }

    function handleAddButtonClick() {
        console.log("Selected IDs:", selectedModifiers);
        console.log("Selected Names:", selectedModifierIds);
        // Perform further actions like submitting selectedModifiers to the server
        var itemlistmodal =bootstrap.Modal.getInstance(document.getElementById("modifieritemslist"))
        itemlistmodal.hide();

        $.ajax({
        url: '/Menu/GetModifierNameListFromIds',
        type: 'GET',
        contentType: 'application/json',
        data: JSON.stringify({modifierIds:selectedModifiers}),
        success: function(response) {

            console.log("Modifier Names:", response);
            // Handle the received names here
        },
        error: function(error) {
            console.error("Error fetching modifier names:", error);
        }
    });

        var modifiermodal =  bootstrap.Modal.getInstance(document.getElementById("addmodifiergroupmodal"))
        modifiermodal.show();

        selectedModifiers.forEach((item)=>{
            @* document.getElementById("selectedModifieritemcontainer").html().append(@await Html.PartialAsync("./_ModifieritemName.cshtml")) *@
            document.getElementById("selectedModifieritemcontainer").innerHTML += `<span class="border rounded-pill px-3 py-1" style="width: fit-content;">
                ${item.name}
                    <span> <img src="/images/icons/x-lg.svg" alt=""> </span>
                </span>`;
        })
        
    }

    function attachCheckboxListeners() {
        document.querySelectorAll(".modifieritemcheckboxofmodal").forEach((checkbox) => {
            checkbox.addEventListener("change", handleCheckboxChange);
        });

        updateCheckboxStates(); // Re-check checkboxes after reloading the partial view
    }

    function onPartialViewLoaded() {
        attachCheckboxListeners();  // Rebind event listeners
    }
@* 
    $("#modifieritems-search-field").on('input',()=>{
        console.log("inside.........")
        PaginationAjax();
    }) *@

    document.getElementById("modifieritemsmodal-search-field").addEventListener('keyup',()=>{
        PaginationAjax();
    })
    document.getElementById("modifieritems-search-field").addEventListener('keyup',()=>{
        ModifieritemsPaginationAjax();
    })
    document.getElementById("menuitem-search-field").addEventListener('keyup',()=>{
        console.log("hello")
        MenuitemsPaginationAjax();
    })


    $("#modifierForm").submit(function (e) {
        e.preventDefault(); // Prevent default form submission

        let formData = new FormData(this); 
        @* let form = $("#modifierForm"); *@
        // Append each selected modifier's id
        selectedModifiers.forEach(modifier => {
            formData.append("ModifieritemsId[]", modifier.id); 
        });



        $.ajax({
            url: $(this).attr("action"), // Get form action URL
            type: $(this).attr("method"), // Get form method (POST)
            data: formData,
            processData: false, // Prevent jQuery from processing the data
            contentType: false, // Prevent jQuery from setting content type
            success: function (response) {
                console.log("Success:", response);
                alert("Modifier group added successfully!");
            },
            error: function (error) {
                console.error("Error:", error);
                alert("Something went wrong!");
            }
        });
    });



</script> 