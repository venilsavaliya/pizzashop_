@model DAL.ViewModels.RolesPermissionListViewModel
@{
    ViewData["Title"] = "Permissions";
    var permissionsList = Model.Permissionlist;
    ViewBag.active="permission";

}

<div class="permission-container  p-3">
    <div class="head-section d-flex justify-content-between align-items-center">
        <h3 class="custom-blue">Permissions</h3>
        <div class="search-section">
            <a asp-action="Roles" asp-controller="Admin"><button type="button" class="btn custom-blue border border-primary">
                    < Back</button></a>
        </div>
    </div>

    <div class="permission-section bg-white shadow  mt-5 pt-4 px-2 pb-4">
        <div class="d-flex w-100">
            <div class="form-floating mb-3 w-50">
                <input type="email" class="form-control" id="floatingInput" value="@ViewBag.RoleName" disabled>
                <label for="floatingInput">Role</label>
            </div>
        </div>

        <form asp-action="SavePermissions" asp-controller="Admin" method="post" enctype="multipart/form-data">
            <div class="table-responsive">
                <table class="table">
                    <tr>
                        <th>
                            <div class="form-check">
                                <input class="form-check-input outer_checkbox" type="checkbox" value=""
                                    id="main-checkbox">
                                <label class="form-check-label" for="flexCheckIndeterminate">
                                    Permissions
                                </label>
                            </div>
                        </th>
                        <th>Can view</th>
                        <th>Can Add/Edit</th>
                        <th>Can Delete</th>
                    </tr>

                    @for (int i = 0; i < permissionsList.Count; i++)
                    {
                        <tr>


                            <td>
                                <div class="form-check">
                                    <input asp-for="@Model.Permissionlist[i].Id" hidden />

                                    <input class="form-check-input inner_checkbox" type="checkbox"
                                        asp-for="@Model.Permissionlist[i].Isenable" />
                                    <label class="form-check-label" for="flexCheckDefault_@i">
                                        @Model.Permissionlist[i].PermissionName
                                    </label>
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch">

                                    <input class="form-check-input toggle-btn" type="checkbox" role="switch"
                                        asp-for="@Model.Permissionlist[i].Canview">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch">

                                    <input class="form-check-input toggle-btn" type="checkbox" role="switch"
                                        asp-for="@Model.Permissionlist[i].Canedit">
                                </div>
                            </td>
                            <td>
                                <div class="form-check form-switch">

                                    <input class="form-check-input toggle-btn" type="checkbox" role="switch"
                                        asp-for="@Model.Permissionlist[i].Candelete">
                                </div>
                            </td>

                        </tr>
                    }
                </table>
                <div class="d-flex justify-content-end gap-2 mat-3">
                    <button class="custom-btn-bg text-white p-2 border rounded" type="submit">Save</button>
                    <button class="bg-white border border-primary rounded p-2 custom-blue" type="reset">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        let mainCheckbox = document.getElementById("main-checkbox");

        function toggleSwitchesBasedOnInnerCheckbox(checkbox) {
            let row = checkbox.closest("tr");
            let canViewCheckbox = row.querySelector("td:nth-child(2) .toggle-btn");
            let canEditCheckbox = row.querySelector("td:nth-child(3) .toggle-btn");
            let canDeleteCheckbox = row.querySelector("td:nth-child(4) .toggle-btn");

            if (checkbox.checked) {
                canViewCheckbox.disabled = false;
            } else {
                canViewCheckbox.disabled = true;
                canViewCheckbox.checked = false;
                canEditCheckbox.disabled = true;
                canEditCheckbox.checked = false;
                canDeleteCheckbox.disabled = true;
                canDeleteCheckbox.checked = false;
            }
        }

        document.querySelectorAll(".inner_checkbox").forEach(function (checkbox) {
            toggleSwitchesBasedOnInnerCheckbox(checkbox); // Initial state setup

            checkbox.addEventListener("change", function () {
                toggleSwitchesBasedOnInnerCheckbox(this);
            });
        });

        document.querySelectorAll(".toggle-btn").forEach(function (toggle) {
            toggle.addEventListener("change", function () {
                let row = this.closest("tr");
                let canViewCheckbox = row.querySelector("td:nth-child(2) .toggle-btn");
                let canEditCheckbox = row.querySelector("td:nth-child(3) .toggle-btn");
                let canDeleteCheckbox = row.querySelector("td:nth-child(4) .toggle-btn");

                if (!canViewCheckbox.checked) {
                    canEditCheckbox.disabled = true;
                    canDeleteCheckbox.disabled = true;
                    canEditCheckbox.checked = false;
                    canDeleteCheckbox.checked = false;
                } else {
                    canEditCheckbox.disabled = false;
                    canDeleteCheckbox.disabled = false;
                }
            });
        });

        mainCheckbox.addEventListener("change", function () {
            let isChecked = this.checked;
            document.querySelectorAll(".inner_checkbox").forEach(function (checkbox) {
                checkbox.checked = isChecked;
                toggleSwitchesBasedOnInnerCheckbox(checkbox);
            });
        });
    });

</script>
